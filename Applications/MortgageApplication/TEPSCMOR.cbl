       PROCESS NODLL,NODYNAM,TEST(NOSEP),NOCICS,NOSQL,PGMN(LU)
      *+---------------------------------------------------------------+
      *| TEPSCMOR                                                      |
      *| PRODUCT: IBM DEVELOPER FOR Z/OS                               |
      *| COMPONENT: IBM Z/OS AUTOMATED UNIT TESTING FRAMEWORK (ZUNIT)  |
      *|   FOR ENTERPRISE COBOL AND PL/I                               |
      *| PROGRAM: ENTERPRISE COBOL ZUNIT TEST CASE FOR DYNAMIC RUNNER  |
      *| TEST CASE VERSION: 102                                        |
      *| DATE GENERATED: 08/29/2023 16:13                              |
      *| ID: 5d201faa-74f7-45d3-9817-7ee64c61b769                      |
      *+---------------------------------------------------------------+
      *+---------------------------------------------------------------+
      *| ZUNIT TEST_TEST1                                              |
      *|     THIS PROGRAM IS FOR TEST TEST1                            |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'TEST_TEST1'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 PROGRAM-NAME   PIC X(8)  VALUE 'EPSCMORT'.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM TEST CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 BZUGETEP          PIC X(8) VALUE 'BZUGETEP'.
       01 AZ-EP-PTR         USAGE IS POINTER.
       01 AZ-TRACE-PTR      POINTER.
       01 ASSERT-ST.
         03 ASSERT-RC PIC 9(9) BINARY VALUE 4.
         03 ASSERT-TEXT PIC 9(4) BINARY VALUE 0.
       01 AZ-TEST-NAME-LEN       PIC S9(9) COMP-5.
       01 AZ-RC-WORK             PIC S9(4) USAGE BINARY.
       01 AZ-COMPARE.
         03 AZ-COMPARE-ITEM-NAME-PTR  POINTER.
         03 AZ-COMPARE-ITEM-NAME-LEN  PIC S9(9) COMP-5.
         03 AZ-COMPARE-ITEM-VALUE-PTR POINTER.
         03 AZ-COMPARE-ITEM-VALUE-LEN PIC S9(9) COMP-5.
         03 AZ-COMPARE-ITEM-EXP-VALUE-PTR POINTER.
         03 AZ-COMPARE-ITEM-EXP-VALUE-LEN PIC S9(9) COMP-5.
         03 AZ-ITEM-NAME-S            PIC S9(8) COMP.
         03 AZ-ITEM-NAME-LEN          PIC S9(8) COMP.
       LOCAL-STORAGE SECTION.
       01 AZ-CONVERT.
         03 AZ-CONVERT-HEXIN  PIC X(1).
         03 AZ-CONVERT-HEXVAL PIC X(2).
         03 AZ-HEXSTR PIC X(16) VALUE "0123456789ABCDEF".
         03 AZ-DEC  PIC S9(4) COMP VALUE 0.
         03 FILLER REDEFINES AZ-DEC.
           05 FILLER PIC X.
           05 AZ-DECBYTE PIC X.
         03 AZ-I PIC S9(8) COMP.
         03 AZ-J PIC S9(8) COMP.
         03 AZ-K PIC S9(8) COMP.
         03 AZ-Q PIC S9(8) COMP.
         03 AZ-R PIC S9(8) COMP.
         03 AZ-Q1 PIC S9(8) COMP.
         03 AZ-R1 PIC S9(8) COMP.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-ARG-LIST.
         03 ARG-LENGTH PIC 9(4) COMP-4.
         03 ARG-DATA PIC X(256).
       01 AZ-INFO-BLOCK.
         COPY BZUITERC.
       01 AZ-PROC-PTR       USAGE IS PROCEDURE-POINTER.
       01 AZ-COMPARE-ITEM-NAME      PIC X(1000).
       01 AZ-COMPARE-ITEM-VALUE     PIC X(254).
       01 AZ-COMPARE-ITEM-EXP-VALUE PIC X(254).
      *  *** DFHEIBLK : ZUT000000AD
       1 ZUT000000AD.
      *    *** EIBTIME : ZUT000000AE
         2 ZUT000000AE PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBDATE : ZUT000000AF
         2 ZUT000000AF PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRNID : ZUT000000B0
         2 ZUT000000B0 PICTURE X(4).
      *    *** EIBTASKN : ZUT000000B1
         2 ZUT000000B1 PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRMID : ZUT000000B2
         2 ZUT000000B2 PICTURE X(4).
      *    *** DFHEIGDI : ZUT000000B3
         2 ZUT000000B3 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCPOSN : ZUT000000B4
         2 ZUT000000B4 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCALEN : ZUT000000B5
         2 ZUT000000B5 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBAID : ZUT000000B6
         2 ZUT000000B6 PICTURE X(1).
      *    *** EIBFN : ZUT000000B7
         2 ZUT000000B7 PICTURE X(2).
      *    *** EIBRCODE : ZUT000000B8
         2 ZUT000000B8 PICTURE X(6).
      *    *** EIBDS : ZUT000000B9
         2 ZUT000000B9 PICTURE X(8).
      *    *** EIBREQID : ZUT000000BA
         2 ZUT000000BA PICTURE X(8).
      *    *** EIBRSRCE : ZUT000000BB
         2 ZUT000000BB PICTURE X(8).
      *    *** EIBSYNC : ZUT000000BC
         2 ZUT000000BC PICTURE X.
      *    *** EIBFREE : ZUT000000BD
         2 ZUT000000BD PICTURE X.
      *    *** EIBRECV : ZUT000000BE
         2 ZUT000000BE PICTURE X.
      *    *** EIBSEND : ZUT000000BF
         2 ZUT000000BF PICTURE X.
      *    *** EIBATT : ZUT000000C0
         2 ZUT000000C0 PICTURE X.
      *    *** EIBEOC : ZUT000000C1
         2 ZUT000000C1 PICTURE X.
      *    *** EIBFMH : ZUT000000C2
         2 ZUT000000C2 PICTURE X.
      *    *** EIBCOMPL : ZUT000000C3
         2 ZUT000000C3 PICTURE X(1).
      *    *** EIBSIG : ZUT000000C4
         2 ZUT000000C4 PICTURE X(1).
      *    *** EIBCONF : ZUT000000C5
         2 ZUT000000C5 PICTURE X(1).
      *    *** EIBERR : ZUT000000C6
         2 ZUT000000C6 PICTURE X(1).
      *    *** EIBERRCD : ZUT000000C7
         2 ZUT000000C7 PICTURE X(4).
      *    *** EIBSYNRB : ZUT000000C8
         2 ZUT000000C8 PICTURE X.
      *    *** EIBNODAT : ZUT000000C9
         2 ZUT000000C9 PICTURE X.
      *    *** EIBRESP : ZUT000000CA
         2 ZUT000000CA PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRESP2 : ZUT000000CB
         2 ZUT000000CB PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRLDBK : ZUT000000CC
         2 ZUT000000CC PICTURE X(1).
      *  *** DFHCOMMAREA : ZUT000000CD
       1 ZUT000000CD.
      *    *** PROCESS-INDICATOR : ZUT000000CE
         10 ZUT000000CE PIC X.
      *    *** EPSPCOM-PRINCIPLE-DATA : ZUT000000CF
         10 ZUT000000CF PIC S9(9)V99 COMP.
      *    *** EPSPCOM-NUMBER-OF-YEARS : ZUT000000D0
         10 ZUT000000D0 PIC S9(4) COMP.
      *    *** EPSPCOM-NUMBER-OF-MONTHS : ZUT000000D1
         10 ZUT000000D1 PIC S9(4) COMP.
      *    *** EPSPCOM-QUOTED-INTEREST-RATE : ZUT000000D2
         10 ZUT000000D2 PIC S9(2)v9(3) COMP.
      *    *** EPSPCOM-YEAR-MONTH-IND : ZUT000000D3
         10 ZUT000000D3 PIC X.
      *    *** EPSPCOM-RETURN-MONTH-PAYMENT : ZUT000000D4
         10 ZUT000000D4 PIC S9(7)V99 COMP.
      *    *** EPSPCOM-ERRMSG : ZUT000000D5
         10 ZUT000000D5 PIC X(80).
      *    *** EPSPCOM-PROGRAM-RETCODE : ZUT000000D6
         10 ZUT000000D6 PIC 9(4).
      *    *** EPS02-REQUEST-SUCCESS : ZUT000000D7
         88 ZUT000000D7 VALUE 0.
          10 ZUT000000D6-AZ REDEFINES ZUT000000D6.
          11 PIC X(4) DISPLAY.
      *    *** EPSPCOM-PROGRAM-RETCODE-RDF : ZUT000000D8
         10 ZUT000000D8 REDEFINES ZUT000000D6 PIC X(4).
       PROCEDURE DIVISION USING AZ-TEST
           ZUT000000AD ZUT000000CD AZ-INFO-BLOCK.
      * START
           DISPLAY 'AZU0000I TEST_TEST1 STARTED...'
           MOVE 0 TO AZ-TEST-NAME-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-NAME-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * INITIALIZE PARAMETER
           PERFORM INITIALIZE-PARM
      * SET AREA ADDRESS TO POINTER
      * SET INPUT VALUE
           MOVE 0 TO RETURN-CODE.
      * CALL TEST PROGRAM
           DISPLAY 'AZU0000I CALL EPSCMORT'
           CALL PROGRAM-NAME
           USING ZUT000000AD ZUT000000CD
           .
      * EVALUATE OUTPUT VALUE
           MOVE 4 TO RETURN-CODE
      * END
           DISPLAY 'AZU0000I TEST_TEST1 END.'
           GOBACK.
       INITIALIZE-PARM.
           EXIT.
       CONVERT.
           MOVE AZ-CONVERT-HEXIN TO AZ-DECBYTE
           DIVIDE AZ-DEC BY 16 GIVING AZ-Q REMAINDER AZ-R
           COMPUTE AZ-Q1 = AZ-Q + 1
           COMPUTE AZ-R1 = AZ-R + 1
           MOVE AZ-HEXSTR(AZ-Q1:1) TO AZ-CONVERT-HEXVAL(1:1)
           MOVE AZ-HEXSTR(AZ-R1:1) TO AZ-CONVERT-HEXVAL(2:1)
           EXIT.
       THROW-ASSERTION.
           MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
           STRING 'COMPARE FAILED IN PROCEDURE DIVISION.'
             DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
             WITH POINTER MESSAGE-LEN OF BZ-ASSERT
           END-STRING
           SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
           SET ADDRESS OF AZ-COMPARE-ITEM-NAME TO
           AZ-COMPARE-ITEM-NAME-PTR.
           SET ADDRESS OF AZ-COMPARE-ITEM-VALUE TO
           AZ-COMPARE-ITEM-VALUE-PTR.
           SET ADDRESS OF AZ-COMPARE-ITEM-EXP-VALUE TO
           AZ-COMPARE-ITEM-EXP-VALUE-PTR.
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           DISPLAY 'AZU2001W THE TEST "' AZ-TEST(1:AZ-TEST-NAME-LEN) '"
      -    'FAILED DUE TO AN ASSERTION.'
           DISPLAY 'AZU1101I ' MESSAGE-TXT OF BZ-ASSERT(1:MESSAGE-LEN
           OF BZ-ASSERT)
           DISPLAY 'AZU0000I  DATA ITEM NAME : '
           AZ-COMPARE-ITEM-NAME(1:AZ-COMPARE-ITEM-NAME-LEN)
           DISPLAY 'AZU0000I   VALUE         : '
           AZ-COMPARE-ITEM-VALUE(1:AZ-COMPARE-ITEM-VALUE-LEN)
           DISPLAY 'AZU0000I   EXPECTED VALUE: '
           AZ-COMPARE-ITEM-EXP-VALUE(1:AZ-COMPARE-ITEM-EXP-VALUE-LEN)
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           CALL BZUASSRT USING BZ-P1 BZ-P2 BZ-P3 BZ-ASSERT
           MOVE 1 TO TRACE-LEN OF BZ-TRACE
           MOVE 1 TO AZ-ITEM-NAME-S
           PERFORM UNTIL AZ-ITEM-NAME-S > AZ-COMPARE-ITEM-NAME-LEN
             MOVE 206 TO AZ-ITEM-NAME-LEN
             IF AZ-ITEM-NAME-S + 206 > AZ-COMPARE-ITEM-NAME-LEN THEN
               MOVE AZ-COMPARE-ITEM-NAME-LEN TO AZ-ITEM-NAME-LEN
               SUBTRACT AZ-ITEM-NAME-S FROM AZ-ITEM-NAME-LEN
               ADD 1 TO AZ-ITEM-NAME-LEN
             END-IF
             STRING 'ITEM NAME='
             AZ-COMPARE-ITEM-NAME(AZ-ITEM-NAME-S:AZ-ITEM-NAME-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
             SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
             SET AZ-TRACE-PTR TO ADDRESS OF TRACE-TXT OF BZ-TRACE
             CALL BZUTRACE USING BZ-TRACE
             MOVE 1 TO TRACE-LEN OF BZ-TRACE
             ADD AZ-ITEM-NAME-LEN TO AZ-ITEM-NAME-S
           END-PERFORM
           STRING 'VALUE   ='
           AZ-COMPARE-ITEM-VALUE(1:AZ-COMPARE-ITEM-VALUE-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
           SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
           CALL BZUTRACE USING BZ-TRACE
           MOVE 1 TO TRACE-LEN OF BZ-TRACE
           STRING 'EXPECTED='
           AZ-COMPARE-ITEM-EXP-VALUE(1:AZ-COMPARE-ITEM-EXP-VALUE-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
           SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
           CALL BZUTRACE USING BZ-TRACE
           EXIT.
       END PROGRAM TEST_TEST1.
      *+---------------------------------------------------------------+
      *| ZUNIT TEST_TEST2                                              |
      *|     THIS PROGRAM IS FOR TEST TEST2                            |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'TEST_TEST2'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 PROGRAM-NAME   PIC X(8)  VALUE 'EPSCMORT'.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM TEST CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 BZUGETEP          PIC X(8) VALUE 'BZUGETEP'.
       01 AZ-EP-PTR         USAGE IS POINTER.
       01 AZ-TRACE-PTR      POINTER.
       01 ASSERT-ST.
         03 ASSERT-RC PIC 9(9) BINARY VALUE 4.
         03 ASSERT-TEXT PIC 9(4) BINARY VALUE 0.
       01 AZ-TEST-NAME-LEN       PIC S9(9) COMP-5.
       01 AZ-RC-WORK             PIC S9(4) USAGE BINARY.
       1 AZ-TEST-EXPECTED-DATA-VALUE.
          3 AZU00000000.
            5 PIC X(1) DISPLAY VALUE '3'.
          3 AZU00000001.
            5 PIC X(4) VALUE X'00000000'.
       01 AZ-COMPARE.
         03 AZ-COMPARE-ITEM-NAME-PTR  POINTER.
         03 AZ-COMPARE-ITEM-NAME-LEN  PIC S9(9) COMP-5.
         03 AZ-COMPARE-ITEM-VALUE-PTR POINTER.
         03 AZ-COMPARE-ITEM-VALUE-LEN PIC S9(9) COMP-5.
         03 AZ-COMPARE-ITEM-EXP-VALUE-PTR POINTER.
         03 AZ-COMPARE-ITEM-EXP-VALUE-LEN PIC S9(9) COMP-5.
         03 AZ-ITEM-NAME-S            PIC S9(8) COMP.
         03 AZ-ITEM-NAME-LEN          PIC S9(8) COMP.
       LOCAL-STORAGE SECTION.
       1 AZ-COMPARE-ITEM-NAMES.
         3 AZU00000002.
            5 PIC X(20) DISPLAY VALUE 'PROCESS-INDICATOR OF'.
            5 PIC X(12) DISPLAY VALUE ' DFHCOMMAREA'.
         3 AZU00000004.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-PRINCIPLE-DA'.
            5 PIC X(17) DISPLAY VALUE 'TA OF DFHCOMMAREA'.
         3 AZU00000006.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-NUMBER-OF-YE'.
            5 PIC X(18) DISPLAY VALUE 'ARS OF DFHCOMMAREA'.
         3 AZU00000008.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-NUMBER-OF-MO'.
            5 PIC X(19) DISPLAY VALUE 'NTHS OF DFHCOMMAREA'.
         3 AZU0000000A.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-QUOTED-INTER'.
            5 PIC X(20) DISPLAY VALUE 'EST-RATE OF DFHCOMMA'.
            5 PIC X(3) DISPLAY VALUE 'REA'.
         3 AZU0000000C.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-RETURN-MONTH'.
            5 PIC X(20) DISPLAY VALUE '-PAYMENT OF DFHCOMMA'.
            5 PIC X(3) DISPLAY VALUE 'REA'.
         3 AZU0000000E.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-PROGRAM-RETC'.
            5 PIC X(18) DISPLAY VALUE 'ODE OF DFHCOMMAREA'.
       1 AZ-COMPARE-WORK-ITEMS.
          3 AZU00000003 PIC X(1) OCCURS 2.
          3 AZU00000005 PIC -9(9).9(2) OCCURS 2.
          3 AZU00000007 PIC -9(4) OCCURS 2.
          3 AZU00000009 PIC -9(4) OCCURS 2.
          3 AZU0000000B PIC -9(2).9(3) OCCURS 2.
          3 AZU0000000D PIC -9(7).9(2) OCCURS 2.
          3 AZU0000000F PIC X(8) OCCURS 2.
       01 AZ-CONVERT.
         03 AZ-CONVERT-HEXIN  PIC X(1).
         03 AZ-CONVERT-HEXVAL PIC X(2).
         03 AZ-HEXSTR PIC X(16) VALUE "0123456789ABCDEF".
         03 AZ-DEC  PIC S9(4) COMP VALUE 0.
         03 FILLER REDEFINES AZ-DEC.
           05 FILLER PIC X.
           05 AZ-DECBYTE PIC X.
         03 AZ-I PIC S9(8) COMP.
         03 AZ-J PIC S9(8) COMP.
         03 AZ-K PIC S9(8) COMP.
         03 AZ-Q PIC S9(8) COMP.
         03 AZ-R PIC S9(8) COMP.
         03 AZ-Q1 PIC S9(8) COMP.
         03 AZ-R1 PIC S9(8) COMP.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-ARG-LIST.
         03 ARG-LENGTH PIC 9(4) COMP-4.
         03 ARG-DATA PIC X(256).
       01 AZ-INFO-BLOCK.
         COPY BZUITERC.
       01 AZ-PROC-PTR       USAGE IS PROCEDURE-POINTER.
       01 AZ-COMPARE-ITEM-NAME      PIC X(1000).
       01 AZ-COMPARE-ITEM-VALUE     PIC X(254).
       01 AZ-COMPARE-ITEM-EXP-VALUE PIC X(254).
      *  *** DFHEIBLK : ZUT000000AD
       1 ZUT000000AD.
      *    *** EIBTIME : ZUT000000AE
         2 ZUT000000AE PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBDATE : ZUT000000AF
         2 ZUT000000AF PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRNID : ZUT000000B0
         2 ZUT000000B0 PICTURE X(4).
      *    *** EIBTASKN : ZUT000000B1
         2 ZUT000000B1 PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRMID : ZUT000000B2
         2 ZUT000000B2 PICTURE X(4).
      *    *** DFHEIGDI : ZUT000000B3
         2 ZUT000000B3 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCPOSN : ZUT000000B4
         2 ZUT000000B4 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCALEN : ZUT000000B5
         2 ZUT000000B5 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBAID : ZUT000000B6
         2 ZUT000000B6 PICTURE X(1).
      *    *** EIBFN : ZUT000000B7
         2 ZUT000000B7 PICTURE X(2).
      *    *** EIBRCODE : ZUT000000B8
         2 ZUT000000B8 PICTURE X(6).
      *    *** EIBDS : ZUT000000B9
         2 ZUT000000B9 PICTURE X(8).
      *    *** EIBREQID : ZUT000000BA
         2 ZUT000000BA PICTURE X(8).
      *    *** EIBRSRCE : ZUT000000BB
         2 ZUT000000BB PICTURE X(8).
      *    *** EIBSYNC : ZUT000000BC
         2 ZUT000000BC PICTURE X.
      *    *** EIBFREE : ZUT000000BD
         2 ZUT000000BD PICTURE X.
      *    *** EIBRECV : ZUT000000BE
         2 ZUT000000BE PICTURE X.
      *    *** EIBSEND : ZUT000000BF
         2 ZUT000000BF PICTURE X.
      *    *** EIBATT : ZUT000000C0
         2 ZUT000000C0 PICTURE X.
      *    *** EIBEOC : ZUT000000C1
         2 ZUT000000C1 PICTURE X.
      *    *** EIBFMH : ZUT000000C2
         2 ZUT000000C2 PICTURE X.
      *    *** EIBCOMPL : ZUT000000C3
         2 ZUT000000C3 PICTURE X(1).
      *    *** EIBSIG : ZUT000000C4
         2 ZUT000000C4 PICTURE X(1).
      *    *** EIBCONF : ZUT000000C5
         2 ZUT000000C5 PICTURE X(1).
      *    *** EIBERR : ZUT000000C6
         2 ZUT000000C6 PICTURE X(1).
      *    *** EIBERRCD : ZUT000000C7
         2 ZUT000000C7 PICTURE X(4).
      *    *** EIBSYNRB : ZUT000000C8
         2 ZUT000000C8 PICTURE X.
      *    *** EIBNODAT : ZUT000000C9
         2 ZUT000000C9 PICTURE X.
      *    *** EIBRESP : ZUT000000CA
         2 ZUT000000CA PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRESP2 : ZUT000000CB
         2 ZUT000000CB PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRLDBK : ZUT000000CC
         2 ZUT000000CC PICTURE X(1).
      *  *** DFHCOMMAREA : ZUT000000CD
       1 ZUT000000CD.
      *    *** PROCESS-INDICATOR : ZUT000000CE
         10 ZUT000000CE PIC X.
      *    *** EPSPCOM-PRINCIPLE-DATA : ZUT000000CF
         10 ZUT000000CF PIC S9(9)V99 COMP.
      *    *** EPSPCOM-NUMBER-OF-YEARS : ZUT000000D0
         10 ZUT000000D0 PIC S9(4) COMP.
      *    *** EPSPCOM-NUMBER-OF-MONTHS : ZUT000000D1
         10 ZUT000000D1 PIC S9(4) COMP.
      *    *** EPSPCOM-QUOTED-INTEREST-RATE : ZUT000000D2
         10 ZUT000000D2 PIC S9(2)v9(3) COMP.
      *    *** EPSPCOM-YEAR-MONTH-IND : ZUT000000D3
         10 ZUT000000D3 PIC X.
      *    *** EPSPCOM-RETURN-MONTH-PAYMENT : ZUT000000D4
         10 ZUT000000D4 PIC S9(7)V99 COMP.
      *    *** EPSPCOM-ERRMSG : ZUT000000D5
         10 ZUT000000D5 PIC X(80).
      *    *** EPSPCOM-PROGRAM-RETCODE : ZUT000000D6
         10 ZUT000000D6 PIC 9(4).
      *    *** EPS02-REQUEST-SUCCESS : ZUT000000D7
         88 ZUT000000D7 VALUE 0.
          10 ZUT000000D6-AZ REDEFINES ZUT000000D6.
          11 PIC X(4) DISPLAY.
      *    *** EPSPCOM-PROGRAM-RETCODE-RDF : ZUT000000D8
         10 ZUT000000D8 REDEFINES ZUT000000D6 PIC X(4).
       PROCEDURE DIVISION USING AZ-TEST
           ZUT000000AD ZUT000000CD AZ-INFO-BLOCK.
      * START
           DISPLAY 'AZU0000I TEST_TEST2 STARTED...'
           MOVE 0 TO AZ-TEST-NAME-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-NAME-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * INITIALIZE PARAMETER
           PERFORM INITIALIZE-PARM
      * SET AREA ADDRESS TO POINTER
      * SET INPUT VALUE
           MOVE 0 TO RETURN-CODE.
      * CALL TEST PROGRAM
           DISPLAY 'AZU0000I CALL EPSCMORT'
           CALL PROGRAM-NAME
           USING ZUT000000AD ZUT000000CD
           .
      * EVALUATE OUTPUT VALUE
           MOVE 0 TO RETURN-CODE
           IF ZUT000000CE OF ZUT000000CD = AZU00000000 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000CE OF ZUT000000CD TO AZU00000003(1)
             MOVE AZU00000000 TO AZU00000003(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000002
             MOVE LENGTH OF AZU00000002 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000003(1)
             MOVE 1 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000003(2)
             MOVE 1 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000CF OF ZUT000000CD = 0 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000CF OF ZUT000000CD TO AZU00000005(1)
             MOVE 0 TO AZU00000005(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000004
             MOVE LENGTH OF AZU00000004 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000005(1)
             MOVE 13 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000005(2)
             MOVE 13 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000D0 OF ZUT000000CD = 0 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000D0 OF ZUT000000CD TO AZU00000007(1)
             MOVE 0 TO AZU00000007(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000006
             MOVE LENGTH OF AZU00000006 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000007(1)
             MOVE 5 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000007(2)
             MOVE 5 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000D1 OF ZUT000000CD = 0 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000D1 OF ZUT000000CD TO AZU00000009(1)
             MOVE 0 TO AZU00000009(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000008
             MOVE LENGTH OF AZU00000008 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000009(1)
             MOVE 5 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000009(2)
             MOVE 5 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000D2 OF ZUT000000CD = 0 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000D2 OF ZUT000000CD TO AZU0000000B(1)
             MOVE 0 TO AZU0000000B(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000000A
             MOVE LENGTH OF AZU0000000A TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU0000000B(1)
             MOVE 7 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000000B(2)
             MOVE 7 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000D4 OF ZUT000000CD = 0 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000D4 OF ZUT000000CD TO AZU0000000D(1)
             MOVE 0 TO AZU0000000D(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000000C
             MOVE LENGTH OF AZU0000000C TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU0000000D(1)
             MOVE 11 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000000D(2)
             MOVE 11 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000D6-AZ OF ZUT000000CD = AZU00000001 THEN
             CONTINUE
           ELSE
             PERFORM VARYING AZ-I FROM 1 BY 1 UNTIL AZ-I > 4
               MOVE ZUT000000D6-AZ OF ZUT000000CD(AZ-I:1) TO
           AZ-CONVERT-HEXIN
               PERFORM CONVERT
               COMPUTE AZ-J = AZ-I * 2 - 1
               MOVE AZ-CONVERT-HEXVAL TO AZU0000000F(1)(AZ-J:2)
             END-PERFORM
             PERFORM VARYING AZ-I FROM 1 BY 1 UNTIL AZ-I > 4
               MOVE AZU00000001(AZ-I:1) TO AZ-CONVERT-HEXIN
               PERFORM CONVERT
               COMPUTE AZ-J = AZ-I * 2 - 1
               MOVE AZ-CONVERT-HEXVAL TO AZU0000000F(2)(AZ-J:2)
             END-PERFORM
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000000E
             MOVE LENGTH OF AZU0000000E TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU0000000F(1)
             MOVE 8 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000000F(2)
             MOVE 8 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
      * END
           DISPLAY 'AZU0000I TEST_TEST2 END.'
           GOBACK.
       INITIALIZE-PARM.
           EXIT.
       CONVERT.
           MOVE AZ-CONVERT-HEXIN TO AZ-DECBYTE
           DIVIDE AZ-DEC BY 16 GIVING AZ-Q REMAINDER AZ-R
           COMPUTE AZ-Q1 = AZ-Q + 1
           COMPUTE AZ-R1 = AZ-R + 1
           MOVE AZ-HEXSTR(AZ-Q1:1) TO AZ-CONVERT-HEXVAL(1:1)
           MOVE AZ-HEXSTR(AZ-R1:1) TO AZ-CONVERT-HEXVAL(2:1)
           EXIT.
       THROW-ASSERTION.
           MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
           STRING 'COMPARE FAILED IN PROCEDURE DIVISION.'
             DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
             WITH POINTER MESSAGE-LEN OF BZ-ASSERT
           END-STRING
           SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
           SET ADDRESS OF AZ-COMPARE-ITEM-NAME TO
           AZ-COMPARE-ITEM-NAME-PTR.
           SET ADDRESS OF AZ-COMPARE-ITEM-VALUE TO
           AZ-COMPARE-ITEM-VALUE-PTR.
           SET ADDRESS OF AZ-COMPARE-ITEM-EXP-VALUE TO
           AZ-COMPARE-ITEM-EXP-VALUE-PTR.
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           DISPLAY 'AZU2001W THE TEST "' AZ-TEST(1:AZ-TEST-NAME-LEN) '"
      -    'FAILED DUE TO AN ASSERTION.'
           DISPLAY 'AZU1101I ' MESSAGE-TXT OF BZ-ASSERT(1:MESSAGE-LEN
           OF BZ-ASSERT)
           DISPLAY 'AZU0000I  DATA ITEM NAME : '
           AZ-COMPARE-ITEM-NAME(1:AZ-COMPARE-ITEM-NAME-LEN)
           DISPLAY 'AZU0000I   VALUE         : '
           AZ-COMPARE-ITEM-VALUE(1:AZ-COMPARE-ITEM-VALUE-LEN)
           DISPLAY 'AZU0000I   EXPECTED VALUE: '
           AZ-COMPARE-ITEM-EXP-VALUE(1:AZ-COMPARE-ITEM-EXP-VALUE-LEN)
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           CALL BZUASSRT USING BZ-P1 BZ-P2 BZ-P3 BZ-ASSERT
           MOVE 1 TO TRACE-LEN OF BZ-TRACE
           MOVE 1 TO AZ-ITEM-NAME-S
           PERFORM UNTIL AZ-ITEM-NAME-S > AZ-COMPARE-ITEM-NAME-LEN
             MOVE 206 TO AZ-ITEM-NAME-LEN
             IF AZ-ITEM-NAME-S + 206 > AZ-COMPARE-ITEM-NAME-LEN THEN
               MOVE AZ-COMPARE-ITEM-NAME-LEN TO AZ-ITEM-NAME-LEN
               SUBTRACT AZ-ITEM-NAME-S FROM AZ-ITEM-NAME-LEN
               ADD 1 TO AZ-ITEM-NAME-LEN
             END-IF
             STRING 'ITEM NAME='
             AZ-COMPARE-ITEM-NAME(AZ-ITEM-NAME-S:AZ-ITEM-NAME-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
             SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
             SET AZ-TRACE-PTR TO ADDRESS OF TRACE-TXT OF BZ-TRACE
             CALL BZUTRACE USING BZ-TRACE
             MOVE 1 TO TRACE-LEN OF BZ-TRACE
             ADD AZ-ITEM-NAME-LEN TO AZ-ITEM-NAME-S
           END-PERFORM
           STRING 'VALUE   ='
           AZ-COMPARE-ITEM-VALUE(1:AZ-COMPARE-ITEM-VALUE-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
           SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
           CALL BZUTRACE USING BZ-TRACE
           MOVE 1 TO TRACE-LEN OF BZ-TRACE
           STRING 'EXPECTED='
           AZ-COMPARE-ITEM-EXP-VALUE(1:AZ-COMPARE-ITEM-EXP-VALUE-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
           SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
           CALL BZUTRACE USING BZ-TRACE
           EXIT.
       END PROGRAM TEST_TEST2.
      *+---------------------------------------------------------------+
      *| ZUNIT TEST_TEST3                                              |
      *|     THIS PROGRAM IS FOR TEST TEST3                            |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'TEST_TEST3'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 PROGRAM-NAME   PIC X(8)  VALUE 'EPSCMORT'.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM TEST CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 BZUGETEP          PIC X(8) VALUE 'BZUGETEP'.
       01 AZ-EP-PTR         USAGE IS POINTER.
       01 AZ-TRACE-PTR      POINTER.
       01 ASSERT-ST.
         03 ASSERT-RC PIC 9(9) BINARY VALUE 4.
         03 ASSERT-TEXT PIC 9(4) BINARY VALUE 0.
       01 AZ-TEST-NAME-LEN       PIC S9(9) COMP-5.
       01 AZ-RC-WORK             PIC S9(4) USAGE BINARY.
       1 AZ-TEST-EXPECTED-DATA-VALUE.
          3 AZU00000010.
            5 PIC X(1) DISPLAY VALUE '0'.
          3 AZU00000011.
            5 PIC X(1) DISPLAY VALUE 'Y'.
          3 AZU00000012.
            5 PIC X(80) DISPLAY VALUE SPACES.
          3 AZU00000013.
            5 PIC X(4) DISPLAY VALUE '0000'.
       01 AZ-COMPARE.
         03 AZ-COMPARE-ITEM-NAME-PTR  POINTER.
         03 AZ-COMPARE-ITEM-NAME-LEN  PIC S9(9) COMP-5.
         03 AZ-COMPARE-ITEM-VALUE-PTR POINTER.
         03 AZ-COMPARE-ITEM-VALUE-LEN PIC S9(9) COMP-5.
         03 AZ-COMPARE-ITEM-EXP-VALUE-PTR POINTER.
         03 AZ-COMPARE-ITEM-EXP-VALUE-LEN PIC S9(9) COMP-5.
         03 AZ-ITEM-NAME-S            PIC S9(8) COMP.
         03 AZ-ITEM-NAME-LEN          PIC S9(8) COMP.
       LOCAL-STORAGE SECTION.
       1 AZ-COMPARE-ITEM-NAMES.
         3 AZU00000014.
            5 PIC X(20) DISPLAY VALUE 'PROCESS-INDICATOR OF'.
            5 PIC X(12) DISPLAY VALUE ' DFHCOMMAREA'.
         3 AZU00000016.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-PRINCIPLE-DA'.
            5 PIC X(17) DISPLAY VALUE 'TA OF DFHCOMMAREA'.
         3 AZU00000018.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-NUMBER-OF-YE'.
            5 PIC X(18) DISPLAY VALUE 'ARS OF DFHCOMMAREA'.
         3 AZU0000001A.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-NUMBER-OF-MO'.
            5 PIC X(19) DISPLAY VALUE 'NTHS OF DFHCOMMAREA'.
         3 AZU0000001C.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-QUOTED-INTER'.
            5 PIC X(20) DISPLAY VALUE 'EST-RATE OF DFHCOMMA'.
            5 PIC X(3) DISPLAY VALUE 'REA'.
         3 AZU0000001E.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-YEAR-MONTH-I'.
            5 PIC X(17) DISPLAY VALUE 'ND OF DFHCOMMAREA'.
         3 AZU00000020.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-RETURN-MONTH'.
            5 PIC X(20) DISPLAY VALUE '-PAYMENT OF DFHCOMMA'.
            5 PIC X(3) DISPLAY VALUE 'REA'.
         3 AZU00000022.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-ERRMSG OF DF'.
            5 PIC X(9) DISPLAY VALUE 'HCOMMAREA'.
         3 AZU00000024.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-PROGRAM-RETC'.
            5 PIC X(20) DISPLAY VALUE 'ODE-RDF OF DFHCOMMAR'.
            5 PIC X(2) DISPLAY VALUE 'EA'.
       1 AZ-COMPARE-WORK-ITEMS.
          3 AZU00000015 PIC X(1) OCCURS 2.
          3 AZU00000017 PIC -9(9).9(2) OCCURS 2.
          3 AZU00000019 PIC -9(4) OCCURS 2.
          3 AZU0000001B PIC -9(4) OCCURS 2.
          3 AZU0000001D PIC -9(2).9(3) OCCURS 2.
          3 AZU0000001F PIC X(1) OCCURS 2.
          3 AZU00000021 PIC -9(7).9(2) OCCURS 2.
          3 AZU00000023 PIC X(80) OCCURS 2.
          3 AZU00000025 PIC X(4) OCCURS 2.
       01 AZ-CONVERT.
         03 AZ-CONVERT-HEXIN  PIC X(1).
         03 AZ-CONVERT-HEXVAL PIC X(2).
         03 AZ-HEXSTR PIC X(16) VALUE "0123456789ABCDEF".
         03 AZ-DEC  PIC S9(4) COMP VALUE 0.
         03 FILLER REDEFINES AZ-DEC.
           05 FILLER PIC X.
           05 AZ-DECBYTE PIC X.
         03 AZ-I PIC S9(8) COMP.
         03 AZ-J PIC S9(8) COMP.
         03 AZ-K PIC S9(8) COMP.
         03 AZ-Q PIC S9(8) COMP.
         03 AZ-R PIC S9(8) COMP.
         03 AZ-Q1 PIC S9(8) COMP.
         03 AZ-R1 PIC S9(8) COMP.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-ARG-LIST.
         03 ARG-LENGTH PIC 9(4) COMP-4.
         03 ARG-DATA PIC X(256).
       01 AZ-INFO-BLOCK.
         COPY BZUITERC.
       01 AZ-PROC-PTR       USAGE IS PROCEDURE-POINTER.
       01 AZ-COMPARE-ITEM-NAME      PIC X(1000).
       01 AZ-COMPARE-ITEM-VALUE     PIC X(254).
       01 AZ-COMPARE-ITEM-EXP-VALUE PIC X(254).
      *  *** DFHEIBLK : ZUT000000AD
       1 ZUT000000AD.
      *    *** EIBTIME : ZUT000000AE
         2 ZUT000000AE PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBDATE : ZUT000000AF
         2 ZUT000000AF PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRNID : ZUT000000B0
         2 ZUT000000B0 PICTURE X(4).
      *    *** EIBTASKN : ZUT000000B1
         2 ZUT000000B1 PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRMID : ZUT000000B2
         2 ZUT000000B2 PICTURE X(4).
      *    *** DFHEIGDI : ZUT000000B3
         2 ZUT000000B3 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCPOSN : ZUT000000B4
         2 ZUT000000B4 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCALEN : ZUT000000B5
         2 ZUT000000B5 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBAID : ZUT000000B6
         2 ZUT000000B6 PICTURE X(1).
      *    *** EIBFN : ZUT000000B7
         2 ZUT000000B7 PICTURE X(2).
      *    *** EIBRCODE : ZUT000000B8
         2 ZUT000000B8 PICTURE X(6).
      *    *** EIBDS : ZUT000000B9
         2 ZUT000000B9 PICTURE X(8).
      *    *** EIBREQID : ZUT000000BA
         2 ZUT000000BA PICTURE X(8).
      *    *** EIBRSRCE : ZUT000000BB
         2 ZUT000000BB PICTURE X(8).
      *    *** EIBSYNC : ZUT000000BC
         2 ZUT000000BC PICTURE X.
      *    *** EIBFREE : ZUT000000BD
         2 ZUT000000BD PICTURE X.
      *    *** EIBRECV : ZUT000000BE
         2 ZUT000000BE PICTURE X.
      *    *** EIBSEND : ZUT000000BF
         2 ZUT000000BF PICTURE X.
      *    *** EIBATT : ZUT000000C0
         2 ZUT000000C0 PICTURE X.
      *    *** EIBEOC : ZUT000000C1
         2 ZUT000000C1 PICTURE X.
      *    *** EIBFMH : ZUT000000C2
         2 ZUT000000C2 PICTURE X.
      *    *** EIBCOMPL : ZUT000000C3
         2 ZUT000000C3 PICTURE X(1).
      *    *** EIBSIG : ZUT000000C4
         2 ZUT000000C4 PICTURE X(1).
      *    *** EIBCONF : ZUT000000C5
         2 ZUT000000C5 PICTURE X(1).
      *    *** EIBERR : ZUT000000C6
         2 ZUT000000C6 PICTURE X(1).
      *    *** EIBERRCD : ZUT000000C7
         2 ZUT000000C7 PICTURE X(4).
      *    *** EIBSYNRB : ZUT000000C8
         2 ZUT000000C8 PICTURE X.
      *    *** EIBNODAT : ZUT000000C9
         2 ZUT000000C9 PICTURE X.
      *    *** EIBRESP : ZUT000000CA
         2 ZUT000000CA PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRESP2 : ZUT000000CB
         2 ZUT000000CB PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRLDBK : ZUT000000CC
         2 ZUT000000CC PICTURE X(1).
      *  *** DFHCOMMAREA : ZUT000000CD
       1 ZUT000000CD.
      *    *** PROCESS-INDICATOR : ZUT000000CE
         10 ZUT000000CE PIC X.
      *    *** EPSPCOM-PRINCIPLE-DATA : ZUT000000CF
         10 ZUT000000CF PIC S9(9)V99 COMP.
      *    *** EPSPCOM-NUMBER-OF-YEARS : ZUT000000D0
         10 ZUT000000D0 PIC S9(4) COMP.
      *    *** EPSPCOM-NUMBER-OF-MONTHS : ZUT000000D1
         10 ZUT000000D1 PIC S9(4) COMP.
      *    *** EPSPCOM-QUOTED-INTEREST-RATE : ZUT000000D2
         10 ZUT000000D2 PIC S9(2)v9(3) COMP.
      *    *** EPSPCOM-YEAR-MONTH-IND : ZUT000000D3
         10 ZUT000000D3 PIC X.
      *    *** EPSPCOM-RETURN-MONTH-PAYMENT : ZUT000000D4
         10 ZUT000000D4 PIC S9(7)V99 COMP.
      *    *** EPSPCOM-ERRMSG : ZUT000000D5
         10 ZUT000000D5 PIC X(80).
      *    *** EPSPCOM-PROGRAM-RETCODE : ZUT000000D6
         10 ZUT000000D6 PIC 9(4).
      *    *** EPS02-REQUEST-SUCCESS : ZUT000000D7
         88 ZUT000000D7 VALUE 0.
          10 ZUT000000D6-AZ REDEFINES ZUT000000D6.
          11 PIC X(4) DISPLAY.
      *    *** EPSPCOM-PROGRAM-RETCODE-RDF : ZUT000000D8
         10 ZUT000000D8 REDEFINES ZUT000000D6 PIC X(4).
       PROCEDURE DIVISION USING AZ-TEST
           ZUT000000AD ZUT000000CD AZ-INFO-BLOCK.
      * START
           DISPLAY 'AZU0000I TEST_TEST3 STARTED...'
           MOVE 0 TO AZ-TEST-NAME-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-NAME-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * INITIALIZE PARAMETER
           PERFORM INITIALIZE-PARM
      * SET AREA ADDRESS TO POINTER
      * SET INPUT VALUE
           MOVE 0 TO RETURN-CODE.
      * CALL TEST PROGRAM
           DISPLAY 'AZU0000I CALL EPSCMORT'
           CALL PROGRAM-NAME
           USING ZUT000000AD ZUT000000CD
           .
      * EVALUATE OUTPUT VALUE
           MOVE 0 TO RETURN-CODE
           IF ZUT000000CE OF ZUT000000CD = AZU00000010 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000CE OF ZUT000000CD TO AZU00000015(1)
             MOVE AZU00000010 TO AZU00000015(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000014
             MOVE LENGTH OF AZU00000014 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000015(1)
             MOVE 1 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000015(2)
             MOVE 1 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000CF OF ZUT000000CD = 20000000.00 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000CF OF ZUT000000CD TO AZU00000017(1)
             MOVE 20000000.00 TO AZU00000017(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000016
             MOVE LENGTH OF AZU00000016 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000017(1)
             MOVE 13 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000017(2)
             MOVE 13 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000D0 OF ZUT000000CD = 10 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000D0 OF ZUT000000CD TO AZU00000019(1)
             MOVE 10 TO AZU00000019(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000018
             MOVE LENGTH OF AZU00000018 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000019(1)
             MOVE 5 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000019(2)
             MOVE 5 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000D1 OF ZUT000000CD = 0 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000D1 OF ZUT000000CD TO AZU0000001B(1)
             MOVE 0 TO AZU0000001B(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000001A
             MOVE LENGTH OF AZU0000001A TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU0000001B(1)
             MOVE 5 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000001B(2)
             MOVE 5 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000D2 OF ZUT000000CD = 2.500 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000D2 OF ZUT000000CD TO AZU0000001D(1)
             MOVE 2.500 TO AZU0000001D(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000001C
             MOVE LENGTH OF AZU0000001C TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU0000001D(1)
             MOVE 7 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000001D(2)
             MOVE 7 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000D3 OF ZUT000000CD = AZU00000011 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000D3 OF ZUT000000CD TO AZU0000001F(1)
             MOVE AZU00000011 TO AZU0000001F(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000001E
             MOVE LENGTH OF AZU0000001E TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU0000001F(1)
             MOVE 1 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000001F(2)
             MOVE 1 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000D4 OF ZUT000000CD = 188539.80 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000D4 OF ZUT000000CD TO AZU00000021(1)
             MOVE 188539.80 TO AZU00000021(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000020
             MOVE LENGTH OF AZU00000020 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000021(1)
             MOVE 11 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000021(2)
             MOVE 11 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000D5 OF ZUT000000CD = AZU00000012 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000D5 OF ZUT000000CD TO AZU00000023(1)
             MOVE AZU00000012 TO AZU00000023(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000022
             MOVE LENGTH OF AZU00000022 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000023(1)
             MOVE 80 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000023(2)
             MOVE 80 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
           IF ZUT000000D8 OF ZUT000000CD = AZU00000013 THEN
             CONTINUE
           ELSE
             MOVE ZUT000000D8 OF ZUT000000CD TO AZU00000025(1)
             MOVE AZU00000013 TO AZU00000025(2)
             SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000024
             MOVE LENGTH OF AZU00000024 TO AZ-COMPARE-ITEM-NAME-LEN
             SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF AZU00000025(1)
             MOVE 4 TO AZ-COMPARE-ITEM-VALUE-LEN
             SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000025(2)
             MOVE 4 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
             PERFORM THROW-ASSERTION
           END-IF
      * END
           DISPLAY 'AZU0000I TEST_TEST3 END.'
           GOBACK.
       INITIALIZE-PARM.
           EXIT.
       CONVERT.
           MOVE AZ-CONVERT-HEXIN TO AZ-DECBYTE
           DIVIDE AZ-DEC BY 16 GIVING AZ-Q REMAINDER AZ-R
           COMPUTE AZ-Q1 = AZ-Q + 1
           COMPUTE AZ-R1 = AZ-R + 1
           MOVE AZ-HEXSTR(AZ-Q1:1) TO AZ-CONVERT-HEXVAL(1:1)
           MOVE AZ-HEXSTR(AZ-R1:1) TO AZ-CONVERT-HEXVAL(2:1)
           EXIT.
       THROW-ASSERTION.
           MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
           STRING 'COMPARE FAILED IN PROCEDURE DIVISION.'
             DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
             WITH POINTER MESSAGE-LEN OF BZ-ASSERT
           END-STRING
           SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
           SET ADDRESS OF AZ-COMPARE-ITEM-NAME TO
           AZ-COMPARE-ITEM-NAME-PTR.
           SET ADDRESS OF AZ-COMPARE-ITEM-VALUE TO
           AZ-COMPARE-ITEM-VALUE-PTR.
           SET ADDRESS OF AZ-COMPARE-ITEM-EXP-VALUE TO
           AZ-COMPARE-ITEM-EXP-VALUE-PTR.
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           DISPLAY 'AZU2001W THE TEST "' AZ-TEST(1:AZ-TEST-NAME-LEN) '"
      -    'FAILED DUE TO AN ASSERTION.'
           DISPLAY 'AZU1101I ' MESSAGE-TXT OF BZ-ASSERT(1:MESSAGE-LEN
           OF BZ-ASSERT)
           DISPLAY 'AZU0000I  DATA ITEM NAME : '
           AZ-COMPARE-ITEM-NAME(1:AZ-COMPARE-ITEM-NAME-LEN)
           DISPLAY 'AZU0000I   VALUE         : '
           AZ-COMPARE-ITEM-VALUE(1:AZ-COMPARE-ITEM-VALUE-LEN)
           DISPLAY 'AZU0000I   EXPECTED VALUE: '
           AZ-COMPARE-ITEM-EXP-VALUE(1:AZ-COMPARE-ITEM-EXP-VALUE-LEN)
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           CALL BZUASSRT USING BZ-P1 BZ-P2 BZ-P3 BZ-ASSERT
           MOVE 1 TO TRACE-LEN OF BZ-TRACE
           MOVE 1 TO AZ-ITEM-NAME-S
           PERFORM UNTIL AZ-ITEM-NAME-S > AZ-COMPARE-ITEM-NAME-LEN
             MOVE 206 TO AZ-ITEM-NAME-LEN
             IF AZ-ITEM-NAME-S + 206 > AZ-COMPARE-ITEM-NAME-LEN THEN
               MOVE AZ-COMPARE-ITEM-NAME-LEN TO AZ-ITEM-NAME-LEN
               SUBTRACT AZ-ITEM-NAME-S FROM AZ-ITEM-NAME-LEN
               ADD 1 TO AZ-ITEM-NAME-LEN
             END-IF
             STRING 'ITEM NAME='
             AZ-COMPARE-ITEM-NAME(AZ-ITEM-NAME-S:AZ-ITEM-NAME-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
             SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
             SET AZ-TRACE-PTR TO ADDRESS OF TRACE-TXT OF BZ-TRACE
             CALL BZUTRACE USING BZ-TRACE
             MOVE 1 TO TRACE-LEN OF BZ-TRACE
             ADD AZ-ITEM-NAME-LEN TO AZ-ITEM-NAME-S
           END-PERFORM
           STRING 'VALUE   ='
           AZ-COMPARE-ITEM-VALUE(1:AZ-COMPARE-ITEM-VALUE-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
           SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
           CALL BZUTRACE USING BZ-TRACE
           MOVE 1 TO TRACE-LEN OF BZ-TRACE
           STRING 'EXPECTED='
           AZ-COMPARE-ITEM-EXP-VALUE(1:AZ-COMPARE-ITEM-EXP-VALUE-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
           SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
           CALL BZUTRACE USING BZ-TRACE
           EXIT.
       END PROGRAM TEST_TEST3.
      *+---------------------------------------------------------------+
      *| ZUNIT BZU_TEST                                                |
      *|     THIS PROGRAM IS CALLBACK DEFINITION FOR TEST              |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'BZU_TEST'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 PROGRAM-NAME   PIC X(8)  VALUE 'EPSCMORT'.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM TEST CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-TRACE-PTR      POINTER.
       01 ASSERT-ST.
         03 ASSERT-RC PIC 9(9) BINARY VALUE 4.
         03 ASSERT-TEXT PIC 9(4) BINARY VALUE 0.
       01 AZ-TEST-NAME-LEN       PIC S9(9) COMP-5.
       LOCAL-STORAGE SECTION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY BZUITERC.
       01 AZ-ARG-LIST.
         03 ARG-LENGTH PIC 9(4) COMP-4.
         03 ARG-DATA PIC X(256).
      *  *** DFHEIBLK : ZUT000000AD
       1 ZUT000000AD.
      *    *** EIBTIME : ZUT000000AE
         2 ZUT000000AE PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBDATE : ZUT000000AF
         2 ZUT000000AF PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRNID : ZUT000000B0
         2 ZUT000000B0 PICTURE X(4).
      *    *** EIBTASKN : ZUT000000B1
         2 ZUT000000B1 PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRMID : ZUT000000B2
         2 ZUT000000B2 PICTURE X(4).
      *    *** DFHEIGDI : ZUT000000B3
         2 ZUT000000B3 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCPOSN : ZUT000000B4
         2 ZUT000000B4 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCALEN : ZUT000000B5
         2 ZUT000000B5 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBAID : ZUT000000B6
         2 ZUT000000B6 PICTURE X(1).
      *    *** EIBFN : ZUT000000B7
         2 ZUT000000B7 PICTURE X(2).
      *    *** EIBRCODE : ZUT000000B8
         2 ZUT000000B8 PICTURE X(6).
      *    *** EIBDS : ZUT000000B9
         2 ZUT000000B9 PICTURE X(8).
      *    *** EIBREQID : ZUT000000BA
         2 ZUT000000BA PICTURE X(8).
      *    *** EIBRSRCE : ZUT000000BB
         2 ZUT000000BB PICTURE X(8).
      *    *** EIBSYNC : ZUT000000BC
         2 ZUT000000BC PICTURE X.
      *    *** EIBFREE : ZUT000000BD
         2 ZUT000000BD PICTURE X.
      *    *** EIBRECV : ZUT000000BE
         2 ZUT000000BE PICTURE X.
      *    *** EIBSEND : ZUT000000BF
         2 ZUT000000BF PICTURE X.
      *    *** EIBATT : ZUT000000C0
         2 ZUT000000C0 PICTURE X.
      *    *** EIBEOC : ZUT000000C1
         2 ZUT000000C1 PICTURE X.
      *    *** EIBFMH : ZUT000000C2
         2 ZUT000000C2 PICTURE X.
      *    *** EIBCOMPL : ZUT000000C3
         2 ZUT000000C3 PICTURE X(1).
      *    *** EIBSIG : ZUT000000C4
         2 ZUT000000C4 PICTURE X(1).
      *    *** EIBCONF : ZUT000000C5
         2 ZUT000000C5 PICTURE X(1).
      *    *** EIBERR : ZUT000000C6
         2 ZUT000000C6 PICTURE X(1).
      *    *** EIBERRCD : ZUT000000C7
         2 ZUT000000C7 PICTURE X(4).
      *    *** EIBSYNRB : ZUT000000C8
         2 ZUT000000C8 PICTURE X.
      *    *** EIBNODAT : ZUT000000C9
         2 ZUT000000C9 PICTURE X.
      *    *** EIBRESP : ZUT000000CA
         2 ZUT000000CA PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRESP2 : ZUT000000CB
         2 ZUT000000CB PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRLDBK : ZUT000000CC
         2 ZUT000000CC PICTURE X(1).
      *  *** DFHCOMMAREA : ZUT000000CD
       1 ZUT000000CD.
      *    *** PROCESS-INDICATOR : ZUT000000CE
         10 ZUT000000CE PIC X.
      *    *** EPSPCOM-PRINCIPLE-DATA : ZUT000000CF
         10 ZUT000000CF PIC S9(9)V99 COMP.
      *    *** EPSPCOM-NUMBER-OF-YEARS : ZUT000000D0
         10 ZUT000000D0 PIC S9(4) COMP.
      *    *** EPSPCOM-NUMBER-OF-MONTHS : ZUT000000D1
         10 ZUT000000D1 PIC S9(4) COMP.
      *    *** EPSPCOM-QUOTED-INTEREST-RATE : ZUT000000D2
         10 ZUT000000D2 PIC S9(2)v9(3) COMP.
      *    *** EPSPCOM-YEAR-MONTH-IND : ZUT000000D3
         10 ZUT000000D3 PIC X.
      *    *** EPSPCOM-RETURN-MONTH-PAYMENT : ZUT000000D4
         10 ZUT000000D4 PIC S9(7)V99 COMP.
      *    *** EPSPCOM-ERRMSG : ZUT000000D5
         10 ZUT000000D5 PIC X(80).
      *    *** EPSPCOM-PROGRAM-RETCODE : ZUT000000D6
         10 ZUT000000D6 PIC 9(4).
      *    *** EPS02-REQUEST-SUCCESS : ZUT000000D7
         88 ZUT000000D7 VALUE 0.
          10 ZUT000000D6-AZ REDEFINES ZUT000000D6.
          11 PIC X(4) DISPLAY.
      *    *** EPSPCOM-PROGRAM-RETCODE-RDF : ZUT000000D8
         10 ZUT000000D8 REDEFINES ZUT000000D6 PIC X(4).
       PROCEDURE DIVISION.
      * SET INPUT VALUE
           ENTRY "PGM_INPT_EPSCMORT" USING AZ-TEST AZ-INFO-BLOCK
           ZUT000000AD ZUT000000CD.
           DISPLAY 'AZU0000I PGM_INPT_EPSCMORT INPUT VALUES...'.
           MOVE 0 TO RETURN-CODE.
           INSPECT AZ-TEST TALLYING AZ-TEST-NAME-LEN FOR CHARACTERS
             BEFORE INITIAL SPACE.
           EVALUATE AZ-TEST(1:AZ-TEST-NAME-LEN)
           WHEN SPACE
             CONTINUE
           WHEN OTHER
             CONTINUE
           END-EVALUATE.
           PERFORM TEARDOWN.
      * EVALUATE OUTPUT VALUE
           ENTRY "PGM_OUTP_EPSCMORT" USING AZ-TEST AZ-INFO-BLOCK
           ZUT000000AD ZUT000000CD.
           DISPLAY 'AZU0000I PGM_OUTP_EPSCMORT CHECK VALUES...'.
           MOVE 4 TO RETURN-CODE.
           INSPECT AZ-TEST TALLYING AZ-TEST-NAME-LEN FOR CHARACTERS
             BEFORE INITIAL SPACE.
           EVALUATE AZ-TEST(1:AZ-TEST-NAME-LEN)
           WHEN SPACE
             CONTINUE
           WHEN 'TEST1'
             MOVE 4 TO RETURN-CODE
           WHEN 'TEST2'
             MOVE 0 TO RETURN-CODE
           WHEN 'TEST3'
             MOVE 0 TO RETURN-CODE
           WHEN OTHER
             CONTINUE
           END-EVALUATE.
           PERFORM TEARDOWN.
       TEARDOWN.
           DISPLAY 'AZU0000I BZU_TEST END.'
           GOBACK.
       THROW-ASSERTION-M.
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           DISPLAY 'AZU2001W THE TEST "' AZ-TEST(1:AZ-TEST-NAME-LEN) '"
      -    'FAILED DUE TO AN ASSERTION.'
           DISPLAY 'AZU1101I ' MESSAGE-TXT OF BZ-ASSERT(1:MESSAGE-LEN
           OF BZ-ASSERT)
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           CALL BZUASSRT USING BZ-P1 BZ-P2 BZ-P3 BZ-ASSERT
           EXIT.
       END PROGRAM BZU_TEST.
      *+---------------------------------------------------------------+
      *| ZUNIT BZU_INIT                                                |
      *|     INITIAL PROCEDURE                                         |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'BZU_INIT'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 AZ-TEST-NAME-LEN      PIC S9(9) COMP-5.
       01 AZ-TESTCASE-ID        PIC X(36)
           VALUE '5d201faa-74f7-45d3-9817-7ee64c61b769'.
       LINKAGE SECTION.
       01 AZ-TEST               PIC X(80).
       01 AZ-TEST-ID            PIC X(80).
       01 AZ-INFO-BLOCK.
           COPY BZUITERC.
       PROCEDURE DIVISION USING AZ-TEST
                                AZ-TEST-ID
                                AZ-INFO-BLOCK.
           MOVE 0 TO AZ-TEST-NAME-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-NAME-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
           DISPLAY 'AZU0000I BZU_INIT: ' AZ-TEST(1:AZ-TEST-NAME-LEN)
           DISPLAY 'AZU0000I TEST CASE VERSION: 102'
           DISPLAY 'AZU0001I FOR TEST RUNNER: <no_value> (NOT FOR:CICSCO
      -    'UNT,DLL)'
           MOVE AZ-TESTCASE-ID TO AZ-TEST-ID
           GOBACK.
       END PROGRAM BZU_INIT.
      *+---------------------------------------------------------------+
      *| ZUNIT BZU_TERM                                                |
      *|     TERMINATION PROCEDURE                                     |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'BZU_TERM'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 AZ-TEST-NAME-LEN      PIC S9(9) COMP-5.
       LINKAGE SECTION.
       01 AZ-TEST               PIC X(80).
       01 AZ-INFO-BLOCK.
           COPY BZUITERC.
       PROCEDURE DIVISION USING AZ-TEST
                                AZ-INFO-BLOCK.
           MOVE 0 TO AZ-TEST-NAME-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-NAME-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
           DISPLAY 'AZU0000I BZU_TERM: ' AZ-TEST(1:AZ-TEST-NAME-LEN)
           GOBACK.
       END PROGRAM BZU_TERM.
      *+---------------------------------------------------------------+
      *| ZUNIT PROGRAM FOR EPSNBRVL                                    |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'PGM_EPSNBRVL'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM STUB CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-TRACE-PTR      POINTER.
       01 AZ-TEST-LEN       PIC S9(8) COMP.
       01 AZ-RECORD.
         03 AZ-RECORD-COUNT-OT PIC 9(5) COMP-5 VALUE 0.
         03 AZ-RECORD-COUNT-IN PIC 9(5) COMP-5 VALUE 0.
       01 AZ-GRP-INDEX      PIC 9(8).
       01 AZ-FLAG-IN        PIC 9(1).
       01 AZ-RECORD-PTR     POINTER.
       01 AZ-RC-WORK        PIC S9(4) USAGE BINARY.
       LOCAL-STORAGE SECTION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY BZUITERC.
       01 AZ-WK-RECORD-COUNT PIC 9(5) COMP-5.
      *  *** EPS-NUMBER-VALIDATION : ZUT000000A6
       1 ZUT000000A6.
      *    *** EPSPARM-VALIDATE-DATA : ZUT000000A7
         3 ZUT000000A7 PIC X(13).
      *    *** EPSPARM-MAX-LENGTH : ZUT000000A8
         3 ZUT000000A8 PIC 99.
      *    *** EPSPARM-NUMBER : ZUT000000A9
         3 ZUT000000A9 PIC 9(13).
      *    *** EPSPARM-DECIMAL : ZUT000000AA
         3 ZUT000000AA PIC V9(13).
      *    *** EPSPARM-BINARY-NUMBER : ZUT000000AB
         3 ZUT000000AB PIC 9(9)V99 COMP.
      *    *** EPSPARM-RETURN-ERROR : ZUT000000AC
         3 ZUT000000AC PIC X(80).
      *
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
           ENTRY "PGM_INPT_EPSCMORT_EPSNBRVL" USING
              AZ-TEST AZ-INFO-BLOCK
           ZUT000000A6.
           DISPLAY
           'AZU0000I PGM_INPT_EPSCMORT_EPSNBRVL CHECK VALUES...' .
           MOVE 4 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET AREA ADDRESS TO POINTER
           MOVE ITER OF AZ-INFO-BLOCK TO AZ-RECORD-COUNT-OT
           MOVE 1 TO AZ-GRP-INDEX
           MOVE 0 TO AZ-FLAG-IN
           MOVE RETURN-CODE TO AZ-RC-WORK
           CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
             AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
           SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
           MOVE AZ-RC-WORK TO RETURN-CODE
           MOVE ITER OF AZ-INFO-BLOCK TO AZ-WK-RECORD-COUNT
           EVALUATE AZ-TEST(1:AZ-TEST-LEN)
           WHEN SPACE
             CONTINUE
           WHEN 'TEST1'
             PERFORM P-OUTPUT-TEST1
           WHEN 'TEST2'
             PERFORM P-OUTPUT-TEST2
           WHEN 'TEST3'
             PERFORM P-OUTPUT-TEST3
           WHEN OTHER
             CONTINUE
           END-EVALUATE.
           PERFORM TEARDOWN.
      * SET INPUT VALUE
           ENTRY "PGM_OUTP_EPSCMORT_EPSNBRVL" USING
              AZ-TEST AZ-INFO-BLOCK
           ZUT000000A6.
           DISPLAY
           'AZU0000I PGM_OUTP_EPSCMORT_EPSNBRVL INPUT VALUES...' .
           MOVE 0 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET AREA ADDRESS TO POINTER
           MOVE ITER OF AZ-INFO-BLOCK TO AZ-RECORD-COUNT-IN
           MOVE 1 TO AZ-GRP-INDEX
           MOVE 1 TO AZ-FLAG-IN
           MOVE RETURN-CODE TO AZ-RC-WORK
           CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
             AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
           SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
           MOVE AZ-RC-WORK TO RETURN-CODE
           MOVE ITER OF AZ-INFO-BLOCK TO AZ-WK-RECORD-COUNT
           EVALUATE AZ-TEST(1:AZ-TEST-LEN)
           WHEN SPACE
             CONTINUE
           WHEN 'TEST1'
             PERFORM P-INPUT-TEST1
           WHEN 'TEST2'
             PERFORM P-INPUT-TEST2
           WHEN 'TEST3'
             PERFORM P-INPUT-TEST3
           WHEN OTHER
             CONTINUE
           END-EVALUATE.
           PERFORM TEARDOWN.
       TEARDOWN.
           DISPLAY 'AZU0000I PGM_EPSNBRVL END.'
           GOBACK.
       P-OUTPUT-TEST1.
           IF AZ-RECORD-COUNT-OT = 0 THEN
             CONTINUE
           ELSE
             CONTINUE
           END-IF.
           EXIT.
       P-OUTPUT-TEST2.
           IF AZ-RECORD-COUNT-OT = 0 THEN
             CONTINUE
           ELSE
             CONTINUE
           END-IF.
           EXIT.
       P-OUTPUT-TEST3.
           IF AZ-RECORD-COUNT-OT = 0 THEN
             CONTINUE
           ELSE
             CONTINUE
           END-IF.
           EXIT.
       P-INPUT-TEST1.
           IF AZ-RECORD-COUNT-IN = 0 THEN
             CONTINUE
           ELSE
             CONTINUE
           END-IF.
           EXIT.
       P-INPUT-TEST2.
           IF AZ-RECORD-COUNT-IN = 0 THEN
             CONTINUE
           ELSE
             CONTINUE
           END-IF.
           EXIT.
       P-INPUT-TEST3.
           IF AZ-RECORD-COUNT-IN = 0 THEN
             CONTINUE
           ELSE
             CONTINUE
           END-IF.
           EXIT.
       END PROGRAM 'PGM_EPSNBRVL'.
      *+---------------------------------------------------------------+
      *| ZUNIT EVALOPT                                                 |
      *|   FUNCTION TO EVALUATE THAT THE BIT OF OPTION DATA            |
      *|   (1) TAKE AND OF GROUP COMMON MASK AND OPTION IN ARG0        |
      *|   (2) CHECK IF THE GROUP MASK IS EQUAL TO (1)                 |
      *|       IF EQUAL,    RTN01 IS 0                                 |
      *|       IF NO EQUAL, RTN01 IS 1                                 |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       ID DIVISION.
       PROGRAM-ID. EVALOPT.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01  OUT1-REC.
         05 OUT1-DATA                PIC X(1) OCCURS 8.
       01 OUT1-DATA-R REDEFINES OUT1-REC.
         05 OUT1-DATA-UP             PIC X(4).
         05 OUT1-DATA-DOWN           PIC X(4).
       01  OUT2-REC.
         05  OUT2-DATA               PIC X(1) OCCURS 8.
       01  OUT2-DATA-R REDEFINES OUT2-REC.
         05 OUT2-DATA-UP             PIC X(4).
         05 OUT2-DATA-DOWN           PIC X(4).
       01  WORK1-REC.
         05  WORK1-DATA              PIC X(1) OCCURS 8.
       01  WORK1-DATA-R REDEFINES WORK1-REC.
         05 WORK1-DATA-UP            PIC X(4).
         05 WORK1-DATA-DOWN          PIC X(4).
       01  WORK-AREA.
         05  WORK-HEX-UP             PIC 9(4)  COMP.
         05  WORK-HEX-DOWN           PIC 9(4)  COMP.
       01  HEX-CHG-BEF.
         05  HEX-CHANGE-LV           PIC X(1) VALUE LOW-VALUE.
         05  HEX-CHANGE-BEFORE       PIC X(1).
       01  HEX-CHG-AFT      REDEFINES  HEX-CHG-BEF.
         05  HEX-CHANGE-AFTER        PIC 9(4)  COMP.
       01  TBL-CHANGE-DATA.
          05  FILLER                 PIC  X(004) VALUE '0000'.
          05  FILLER                 PIC  X(001) VALUE '0'.
          05  FILLER                 PIC  X(004) VALUE '0001'.
          05  FILLER                 PIC  X(001) VALUE '1'.
          05  FILLER                 PIC  X(004) VALUE '0010'.
          05  FILLER                 PIC  X(001) VALUE '2'.
          05  FILLER                 PIC  X(004) VALUE '0011'.
          05  FILLER                 PIC  X(001) VALUE '3'.
          05  FILLER                 PIC  X(004) VALUE '0100'.
          05  FILLER                 PIC  X(001) VALUE '4'.
          05  FILLER                 PIC  X(004) VALUE '0101'.
          05  FILLER                 PIC  X(001) VALUE '5'.
          05  FILLER                 PIC  X(004) VALUE '0110'.
          05  FILLER                 PIC  X(001) VALUE '6'.
          05  FILLER                 PIC  X(004) VALUE '0111'.
          05  FILLER                 PIC  X(001) VALUE '7'.
          05  FILLER                 PIC  X(004) VALUE '1000'.
          05  FILLER                 PIC  X(001) VALUE '8'.
          05  FILLER                 PIC  X(004) VALUE '1001'.
          05  FILLER                 PIC  X(001) VALUE '9'.
          05  FILLER                 PIC  X(004) VALUE '1010'.
          05  FILLER                 PIC  X(001) VALUE 'A'.
          05  FILLER                 PIC  X(004) VALUE '1011'.
          05  FILLER                 PIC  X(001) VALUE 'B'.
          05  FILLER                 PIC  X(004) VALUE '1100'.
          05  FILLER                 PIC  X(001) VALUE 'C'.
          05  FILLER                 PIC  X(004) VALUE '1101'.
          05  FILLER                 PIC  X(001) VALUE 'D'.
          05  FILLER                 PIC  X(004) VALUE '1110'.
          05  FILLER                 PIC  X(001) VALUE 'E'.
          05  FILLER                 PIC  X(004) VALUE '1111'.
          05  FILLER                 PIC  X(001) VALUE 'F'.
          01  TBL-DATA REDEFINES TBL-CHANGE-DATA.
           05  TBL-CHG  OCCURS  16 TIMES.
             10  TBL-BIT-CHAR        PIC  X(004).
             10  TBL-HEX-CHAR        PIC  X(001).
       01 BIT-COUNT                  PIC 9(1).
       01 I                          PIC S9(8) COMP.
       LINKAGE SECTION.
       01 G-MASK.
         03 D-G-MASK                 PIC X(1) OCCURS 19.
       01 COM-MASK.
         03 D-COM-MASK               PIC X(1) OCCURS 19.
       01 O-ARG0.
         03 D-O-ARG0                 PIC X(1) OCCURS 19.
       01 BYTE-COUNT                 PIC S9(8) COMP.
       01 RTN01                      PIC 9(1).
       01 AZ-TEST                    PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY BZUITERC.
       PROCEDURE DIVISION USING G-MASK COM-MASK O-ARG0 BYTE-COUNT
            RTN01.
       MAINPROC SECTION.
            MOVE 0 TO RTN01
            PERFORM VARYING I FROM 1 BY 1 UNTIL I > BYTE-COUNT
              PERFORM ANDCOMMASK
              IF RTN01 = 1 THEN
                GOBACK
              END-IF
            END-PERFORM.
            EXIT PROGRAM.
       ANDCOMMASK.
      * CONVERT GROUP COMMON MASK TO BIT
            MOVE D-COM-MASK(I) TO HEX-CHANGE-BEFORE.
            DIVIDE 16 INTO HEX-CHANGE-AFTER GIVING WORK-HEX-UP
                                         REMAINDER WORK-HEX-DOWN.
            MOVE TBL-BIT-CHAR(WORK-HEX-UP + 1)   TO OUT1-DATA-UP.
            MOVE TBL-BIT-CHAR(WORK-HEX-DOWN + 1) TO OUT1-DATA-DOWN.
      * CONVERT OPTION IN ARG0 TO BIT
            MOVE D-O-ARG0(I) TO HEX-CHANGE-BEFORE.
            DIVIDE 16 INTO HEX-CHANGE-AFTER GIVING WORK-HEX-UP
                                         REMAINDER WORK-HEX-DOWN.
            MOVE TBL-BIT-CHAR(WORK-HEX-UP + 1)   TO OUT2-DATA-UP.
            MOVE TBL-BIT-CHAR(WORK-HEX-DOWN + 1) TO OUT2-DATA-DOWN.
      * CREATE EVAL BIT FROM GROUP COMMON MASK BIT AND ARG0 BIT
            PERFORM VARYING BIT-COUNT FROM 1 BY 1 UNTIL BIT-COUNT > 8
              IF OUT1-DATA(BIT-COUNT) = '1' AND
                 OUT2-DATA(BIT-COUNT) = '1' THEN
                MOVE '1' TO WORK1-DATA(BIT-COUNT)
              ELSE
                MOVE '0' TO WORK1-DATA(BIT-COUNT)
              END-IF
            END-PERFORM.
      * CONVERT GROUP MASK TO BIT DATA
            MOVE D-G-MASK(I) TO HEX-CHANGE-BEFORE.
            DIVIDE 16 INTO HEX-CHANGE-AFTER GIVING WORK-HEX-UP
                                         REMAINDER WORK-HEX-DOWN.
            MOVE TBL-BIT-CHAR(WORK-HEX-UP + 1)   TO OUT1-DATA-UP.
            MOVE TBL-BIT-CHAR(WORK-HEX-DOWN + 1) TO OUT1-DATA-DOWN.
      * CHECK IF EQUAL BETWEEN EVAL BIT AND GROUP MASK BIT
            IF WORK1-DATA-UP = OUT1-DATA-UP AND
               WORK1-DATA-DOWN = OUT1-DATA-DOWN THEN
              CONTINUE
            ELSE
              MOVE 1 TO RTN01
            END-IF
            EXIT.
       CB-ENTRY.
      * ENTRY FOR CALLBACK
           ENTRY "PGM_INPT_EVALOPT" USING AZ-TEST AZ-INFO-BLOCK
             G-MASK COM-MASK O-ARG0 BYTE-COUNT RTN01.
           PERFORM MAINPROC.
           EXIT.
       END PROGRAM 'EVALOPT'.
      *+---------------------------------------------------------------+
      *| ZUNIT GTMEMRC                                                 |
      *|     GET DATA AREA FOR RECORD COUNT OF SUBSYSTEM GROUP         |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'GTMEMRC'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BZUGTMEM            PIC X(8) VALUE 'BZUGTMEM'.
       01 DATA-SIZE           PIC 9(8) COMP-4.
       LINKAGE SECTION.
       01 TC-WORK-AREA        PIC X(256).
       01 AZ-GRP-INDEX        PIC 9(8).
       01 AZ-FLAG-IN          PIC 9(1).
       01 AZ-RECORD-PTR       POINTER.
       01 AZ-RECORD-PTR-VALUE
            REDEFINES AZ-RECORD-PTR  PIC S9(9) COMP-5.
       01 DATA-PTR            POINTER.
       01 DATA-PTR-VALUE
            REDEFINES DATA-PTR  PIC S9(9) COMP-5.
       01 DATA-AREA.
         03 RECORD-COUNT-IO OCCURS 7.
           05 RECORD-COUNT-OT PIC 9(5) COMP-5.
           05 RECORD-COUNT-IN PIC 9(5) COMP-5.
       01 WK-RECORD-COUNT     PIC 9(5) COMP-5.
       01 AZ-TEST             PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY BZUITERC.
       PROCEDURE DIVISION USING TC-WORK-AREA AZ-GRP-INDEX AZ-FLAG-IN
           AZ-RECORD-PTR.
       MAINPROC SECTION.
      * GET DATA AREA
           SET ADDRESS OF DATA-PTR TO ADDRESS OF TC-WORK-AREA.
           IF DATA-PTR-VALUE = 0 THEN
             COMPUTE DATA-SIZE = LENGTH OF WK-RECORD-COUNT * 2 * 7
             CALL BZUGTMEM USING DATA-SIZE RETURNING DATA-PTR
             SET ADDRESS OF DATA-AREA TO DATA-PTR
             DISPLAY 'AZU0000I AREA ALLOCATED FOR RECORD COUNT:'
           DATA-SIZE
           END-IF
           SET AZ-RECORD-PTR TO DATA-PTR
           COMPUTE AZ-RECORD-PTR-VALUE = AZ-RECORD-PTR-VALUE +
                 LENGTH OF WK-RECORD-COUNT * 2 * (AZ-GRP-INDEX - 1)
           IF AZ-FLAG-IN = 1 THEN
             ADD LENGTH OF WK-RECORD-COUNT TO AZ-RECORD-PTR-VALUE
           END-IF
           SET ADDRESS OF WK-RECORD-COUNT TO AZ-RECORD-PTR
           GOBACK.
       CB-ENTRY.
      * ENTRY FOR CALLBACK
           ENTRY "PGM_INPT_GTMEMRC" USING AZ-TEST AZ-INFO-BLOCK
             TC-WORK-AREA AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR.
           PERFORM MAINPROC.
           EXIT.
       END PROGRAM 'GTMEMRC'.
      *+---------------------------------------------------------------+
      *| ZUNIT AZU_GENERIC_CICS                                        |
      *|   GENERIC CICS CALLBACK EXIT POINT                            |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'AZU_GENERIC_CICS'.
       DATA DIVISION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY BZUITERC.
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
      * CICS_INPT.
           ENTRY 'CICS_INPT' USING AZ-TEST
                                   AZ-INFO-BLOCK.
           DISPLAY 'AZU0000I CICS_INPT ...'
           MOVE 4 TO RETURN-CODE.
           GOBACK.
      * CICS_OUTP.
           ENTRY 'CICS_OUTP' USING AZ-TEST
                                   AZ-INFO-BLOCK.
           DISPLAY 'AZU0000I CICS_OUTP ...'
           MOVE 4 TO RETURN-CODE.
           GOBACK.
      * CICS_INPT_0E08 FOR RETURN.
           ENTRY 'CICS_INPT_0E08' USING AZ-TEST
                                        AZ-INFO-BLOCK.
           DISPLAY 'AZU0000I CICS_INPT_0E08 ...'
           MOVE 0 TO RETURN-CODE.
           GOBACK.
       END PROGRAM 'AZU_GENERIC_CICS'.
      *+---------------------------------------------------------------+
      *| ZUNIT PROGRAM FOR EXEC CICS SEND TEXT                         |
      *|    FUNCTION CODE: 1806                                        |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'CICS_1806_EPSCMORT'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM CICS CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-TRACE-PTR      POINTER.
       01 AZ-TEST-LEN       PIC S9(8) COMP.
       01 AZ-RECORD.
         03 AZ-RECORD-COUNT-OT OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
         03 AZ-RECORD-COUNT-IN OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
       01 AZ-GRP-INDEX       PIC 9(8).
       01 AZ-FLAG-IN         PIC 9(1).
       01 AZ-RECORD-PTR      POINTER.
       01 AZ-OPT-MASK-DATA2  PIC X(2).
       01 AZ-OPT-MASK-DATA9  PIC X(9).
       01 AZ-OPT-MASK-DATA11 PIC X(11).
       01 AZ-OPT-MASK-DATA19 PIC X(19).
       01 AZ-OPT-BYTECOUNT   PIC S9(8) COMP.
       01 AZ-OPT-RC          PIC 9(1) VALUE 0.
       01 AZ-OPT-COMMASK.
         03  AZ-OPT-COMMASK-DATA2  PIC X(2) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA9  PIC X(9) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA11 PIC X(11) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA19 PIC X(19) OCCURS 1.
       01 AZ-LINE-BYTE      PIC S9(2) COMP.
       01 AZ-LINE-NUM       PIC 9(5).
       01 AZ-LINE-NUM-R   REDEFINES AZ-LINE-NUM.
         03 AZ-LINE-NUM-RD  PIC 9(1) OCCURS 5.
       01 AZ-LINE-I         PIC S9(8) COMP.
       01 AZ-LINE-J         PIC S9(8) COMP.
       01 AZ-RC-WORK        PIC S9(4) USAGE BINARY.
       LOCAL-STORAGE SECTION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY BZUITERC.
       01 AZ-WK-RECORD-COUNT PIC 9(5) COMP-5.
       01 AZ-MODX                   PIC X(4).
       01 AZ-DFHEIBLK.
         03 FILLER                  PIC X(85).
       01 AZ-DFHCOMMAREA.
         03 FILLER                  PIC X(1).
       01 ARG0.
         03 ARG0-1        PIC X(2).
         03 ARG0-A        PIC X(28).
         03 ARG0-B REDEFINES ARG0-A.
           05 ARG0-2      PIC X(9).
           05 FILLER      PIC X(19).
         03 ARG0-C REDEFINES ARG0-A.
           05 FILLER      PIC X(6).
           05 ARG0-D.
             07 ARG0-3    PIC 9(1) OCCURS 22.
       01 ARG1            POINTER.
       01 ARG2            POINTER.
       01 ARG3            POINTER.
       01 ARG4            POINTER.
       01 ARG5            POINTER.
       01 ARG6            POINTER.
       01 ARG7            POINTER.
       01 ARG8            POINTER.
       01 ARG9            POINTER.
       01 ARG10           POINTER.
       01 ARG11           POINTER.
       01 ARG12           POINTER.
       01 ARG13           POINTER.
       01 ARG14           POINTER.
       01 ARG15           POINTER.
       01 AZ-CICS-TARGET-NAME-DEF4 PIC X(4).
       01 AZ-CICS-TARGET-NAME-DEF7 PIC X(7).
       01 AZ-CICS-TARGET-NAME-DEF8 PIC X(8).
      *  *** DFHEIBLK : ZUT000000AD
       1 ZUT000000AD.
      *    *** EIBTIME : ZUT000000AE
         2 ZUT000000AE PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBDATE : ZUT000000AF
         2 ZUT000000AF PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRNID : ZUT000000B0
         2 ZUT000000B0 PICTURE X(4).
      *    *** EIBTASKN : ZUT000000B1
         2 ZUT000000B1 PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRMID : ZUT000000B2
         2 ZUT000000B2 PICTURE X(4).
      *    *** DFHEIGDI : ZUT000000B3
         2 ZUT000000B3 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCPOSN : ZUT000000B4
         2 ZUT000000B4 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCALEN : ZUT000000B5
         2 ZUT000000B5 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBAID : ZUT000000B6
         2 ZUT000000B6 PICTURE X(1).
      *    *** EIBFN : ZUT000000B7
         2 ZUT000000B7 PICTURE X(2).
      *    *** EIBRCODE : ZUT000000B8
         2 ZUT000000B8 PICTURE X(6).
      *    *** EIBDS : ZUT000000B9
         2 ZUT000000B9 PICTURE X(8).
      *    *** EIBREQID : ZUT000000BA
         2 ZUT000000BA PICTURE X(8).
      *    *** EIBRSRCE : ZUT000000BB
         2 ZUT000000BB PICTURE X(8).
      *    *** EIBSYNC : ZUT000000BC
         2 ZUT000000BC PICTURE X.
      *    *** EIBFREE : ZUT000000BD
         2 ZUT000000BD PICTURE X.
      *    *** EIBRECV : ZUT000000BE
         2 ZUT000000BE PICTURE X.
      *    *** EIBSEND : ZUT000000BF
         2 ZUT000000BF PICTURE X.
      *    *** EIBATT : ZUT000000C0
         2 ZUT000000C0 PICTURE X.
      *    *** EIBEOC : ZUT000000C1
         2 ZUT000000C1 PICTURE X.
      *    *** EIBFMH : ZUT000000C2
         2 ZUT000000C2 PICTURE X.
      *    *** EIBCOMPL : ZUT000000C3
         2 ZUT000000C3 PICTURE X(1).
      *    *** EIBSIG : ZUT000000C4
         2 ZUT000000C4 PICTURE X(1).
      *    *** EIBCONF : ZUT000000C5
         2 ZUT000000C5 PICTURE X(1).
      *    *** EIBERR : ZUT000000C6
         2 ZUT000000C6 PICTURE X(1).
      *    *** EIBERRCD : ZUT000000C7
         2 ZUT000000C7 PICTURE X(4).
      *    *** EIBSYNRB : ZUT000000C8
         2 ZUT000000C8 PICTURE X.
      *    *** EIBNODAT : ZUT000000C9
         2 ZUT000000C9 PICTURE X.
      *    *** EIBRESP : ZUT000000CA
         2 ZUT000000CA PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRESP2 : ZUT000000CB
         2 ZUT000000CB PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRLDBK : ZUT000000CC
         2 ZUT000000CC PICTURE X(1).
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
      * CICS_INPT_1806_EPSCMORT.
           ENTRY 'CICS_INPT_1806_EPSCMORT' USING AZ-TEST
           AZ-INFO-BLOCK ZUT000000AD AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10 ARG11 ARG12 ARG13
           ARG14 ARG15.
           DISPLAY 'AZU0000I CICS_1806_EPSCMORT CHECK VALUES...'
           MOVE 4 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'6000' TO AZ-OPT-COMMASK-DATA2(1).
      * EXEC CICS SEND TEXT X'6000'
           IF ARG0-1 = X'1806'
             MOVE X'6000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-OPT-RC = 0 THEN
               MOVE 9 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS SEND TEXT X''6000'''
                ' L=' AZ-LINE-NUM
               MOVE 2 TO AZ-GRP-INDEX
               MOVE 0 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-OT(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
      * SET INPUT VALUE
      * CICS_OUTP_1806_EPSCMORT.
           ENTRY 'CICS_OUTP_1806_EPSCMORT' USING AZ-TEST
           AZ-INFO-BLOCK ZUT000000AD AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10 ARG11 ARG12 ARG13
           ARG14 ARG15.
           DISPLAY 'AZU0000I CICS_1806_EPSCMORT INPUT VALUES...'
           MOVE 0 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'6000' TO AZ-OPT-COMMASK-DATA2(1).
      * EXEC CICS SEND TEXT X'6000'
           IF ARG0-1 = X'1806'
             MOVE X'6000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-OPT-RC = 0 THEN
               MOVE 9 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS SEND TEXT X''6000'''
                ' L=' AZ-LINE-NUM
               MOVE 2 TO AZ-GRP-INDEX
               MOVE 1 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-IN(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
       GETLINENUM.
           MOVE 1 TO AZ-LINE-J
           PERFORM VARYING AZ-LINE-I FROM AZ-LINE-BYTE BY 1
             UNTIL AZ-LINE-I > AZ-LINE-BYTE + 4
             MOVE ARG0-3(AZ-LINE-I) TO AZ-LINE-NUM-RD(AZ-LINE-J)
             ADD 1 TO AZ-LINE-J
           END-PERFORM
           EXIT.
       TEARDOWN.
           DISPLAY 'AZU0000I CICS_1806_EPSCMORT END.'
           GOBACK.
       END PROGRAM 'CICS_1806_EPSCMORT'.
      *+---------------------------------------------------------------+
      *| ZUNIT PROGRAM FOR EXEC CICS RETURN                            |
      *|    FUNCTION CODE: 0E08                                        |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'CICS_0E08_EPSCMORT'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM CICS CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-TRACE-PTR      POINTER.
       01 AZ-TEST-LEN       PIC S9(8) COMP.
       01 AZ-RECORD.
         03 AZ-RECORD-COUNT-OT OCCURS 2 PIC 9(5) COMP-5 VALUE 0.
         03 AZ-RECORD-COUNT-IN OCCURS 2 PIC 9(5) COMP-5 VALUE 0.
       01 AZ-GRP-INDEX       PIC 9(8).
       01 AZ-FLAG-IN         PIC 9(1).
       01 AZ-RECORD-PTR      POINTER.
       01 AZ-OPT-MASK-DATA2  PIC X(2).
       01 AZ-OPT-MASK-DATA9  PIC X(9).
       01 AZ-OPT-MASK-DATA11 PIC X(11).
       01 AZ-OPT-MASK-DATA19 PIC X(19).
       01 AZ-OPT-BYTECOUNT   PIC S9(8) COMP.
       01 AZ-OPT-RC          PIC 9(1) VALUE 0.
       01 AZ-OPT-COMMASK.
         03  AZ-OPT-COMMASK-DATA2  PIC X(2) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA9  PIC X(9) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA11 PIC X(11) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA19 PIC X(19) OCCURS 1.
       01 AZ-LINE-BYTE      PIC S9(2) COMP.
       01 AZ-LINE-NUM       PIC 9(5).
       01 AZ-LINE-NUM-R   REDEFINES AZ-LINE-NUM.
         03 AZ-LINE-NUM-RD  PIC 9(1) OCCURS 5.
       01 AZ-LINE-I         PIC S9(8) COMP.
       01 AZ-LINE-J         PIC S9(8) COMP.
       01 AZ-RC-WORK        PIC S9(4) USAGE BINARY.
       01 AZ-COMPARE.
         03 AZ-COMPARE-ITEM-NAME-PTR POINTER.
         03 AZ-COMPARE-ITEM-NAME-LEN PIC S9(9) COMP-5.
         03 AZ-COMPARE-ITEM-VALUE-PTR POINTER.
         03 AZ-COMPARE-ITEM-VALUE-LEN PIC S9(9) COMP-5.
         03 AZ-COMPARE-ITEM-EXP-VALUE-PTR POINTER.
         03 AZ-COMPARE-ITEM-EXP-VALUE-LEN PIC S9(9) COMP-5.
         03 AZ-ITEM-NAME-S            PIC S9(8) COMP.
         03 AZ-ITEM-NAME-LEN          PIC S9(8) COMP.
       1 AZ-TEST-EXPECTED-DATA-VALUE.
          3 AZU00000000.
            5 PIC X(1) DISPLAY VALUE '3'.
          3 AZU00000001.
            5 PIC X(4) VALUE X'00000000'.
          3 AZU00000002.
            5 PIC X(1) DISPLAY VALUE '0'.
          3 AZU00000003.
            5 PIC X(1) DISPLAY VALUE 'Y'.
          3 AZU00000004.
            5 PIC X(80) DISPLAY VALUE SPACES.
          3 AZU00000005.
            5 PIC X(4) DISPLAY VALUE '0000'.
       LOCAL-STORAGE SECTION.
       1 AZ-COMPARE-ITEM-NAMES.
         3 AZU00000006.
            5 PIC X(20) DISPLAY VALUE 'PROCESS-INDICATOR OF'.
            5 PIC X(20) DISPLAY VALUE ' W-COMMUNICATION-ARE'.
            5 PIC X(1) DISPLAY VALUE 'A'.
         3 AZU00000008.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-PRINCIPLE-DA'.
            5 PIC X(20) DISPLAY VALUE 'TA OF W-COMMUNICATIO'.
            5 PIC X(6) DISPLAY VALUE 'N-AREA'.
         3 AZU0000000A.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-NUMBER-OF-YE'.
            5 PIC X(20) DISPLAY VALUE 'ARS OF W-COMMUNICATI'.
            5 PIC X(7) DISPLAY VALUE 'ON-AREA'.
         3 AZU0000000C.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-NUMBER-OF-MO'.
            5 PIC X(20) DISPLAY VALUE 'NTHS OF W-COMMUNICAT'.
            5 PIC X(8) DISPLAY VALUE 'ION-AREA'.
         3 AZU0000000E.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-QUOTED-INTER'.
            5 PIC X(20) DISPLAY VALUE 'EST-RATE OF W-COMMUN'.
            5 PIC X(12) DISPLAY VALUE 'ICATION-AREA'.
         3 AZU00000010.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-RETURN-MONTH'.
            5 PIC X(20) DISPLAY VALUE '-PAYMENT OF W-COMMUN'.
            5 PIC X(12) DISPLAY VALUE 'ICATION-AREA'.
         3 AZU00000012.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-PROGRAM-RETC'.
            5 PIC X(20) DISPLAY VALUE 'ODE OF W-COMMUNICATI'.
            5 PIC X(7) DISPLAY VALUE 'ON-AREA'.
         3 AZU00000014.
            5 PIC X(16) DISPLAY VALUE 'W-COMAREA-LENGTH'.
         3 AZU00000016.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-YEAR-MONTH-I'.
            5 PIC X(20) DISPLAY VALUE 'ND OF W-COMMUNICATIO'.
            5 PIC X(6) DISPLAY VALUE 'N-AREA'.
         3 AZU00000018.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-ERRMSG OF W-'.
            5 PIC X(18) DISPLAY VALUE 'COMMUNICATION-AREA'.
         3 AZU0000001A.
            5 PIC X(20) DISPLAY VALUE 'EPSPCOM-PROGRAM-RETC'.
            5 PIC X(20) DISPLAY VALUE 'ODE-RDF OF W-COMMUNI'.
            5 PIC X(11) DISPLAY VALUE 'CATION-AREA'.
       1 AZ-COMPARE-WORK-ITEMS.
          3 AZU00000007 PIC X(1) OCCURS 2.
          3 AZU00000009 PIC -9(9).9(2) OCCURS 2.
          3 AZU0000000B PIC -9(4) OCCURS 2.
          3 AZU0000000D PIC -9(4) OCCURS 2.
          3 AZU0000000F PIC -9(2).9(3) OCCURS 2.
          3 AZU00000011 PIC -9(7).9(2) OCCURS 2.
          3 AZU00000013 PIC X(8) OCCURS 2.
          3 AZU00000015 PIC 9(4) OCCURS 2.
          3 AZU00000017 PIC X(1) OCCURS 2.
          3 AZU00000019 PIC X(80) OCCURS 2.
          3 AZU0000001B PIC X(4) OCCURS 2.
       01 AZ-CONVERT.
         03 AZ-CONVERT-HEXIN  PIC X(1).
         03 AZ-CONVERT-HEXVAL PIC X(2).
         03 AZ-HEXSTR PIC X(16) VALUE "0123456789ABCDEF".
         03 AZ-DEC  PIC S9(4) COMP VALUE 0.
         03 FILLER REDEFINES AZ-DEC.
           05 FILLER PIC X.
           05 AZ-DECBYTE PIC X.
         03 AZ-I PIC S9(8) COMP.
         03 AZ-J PIC S9(8) COMP.
         03 AZ-K PIC S9(8) COMP.
         03 AZ-Q PIC S9(8) COMP.
         03 AZ-R PIC S9(8) COMP.
         03 AZ-Q1 PIC S9(8) COMP.
         03 AZ-R1 PIC S9(8) COMP.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY BZUITERC.
       01 AZ-WK-RECORD-COUNT PIC 9(5) COMP-5.
       01 AZ-MODX                   PIC X(4).
       01 AZ-DFHEIBLK.
         03 FILLER                  PIC X(85).
       01 AZ-DFHCOMMAREA.
         03 FILLER                  PIC X(1).
       01 AZ-COMPARE-ITEM-NAME      PIC X(1000).
       01 AZ-COMPARE-ITEM-VALUE     PIC X(254).
       01 AZ-COMPARE-ITEM-EXP-VALUE PIC X(254).
       01 ARG0.
         03 ARG0-1        PIC X(2).
         03 ARG0-A        PIC X(28).
         03 ARG0-B REDEFINES ARG0-A.
           05 ARG0-2      PIC X(9).
           05 FILLER      PIC X(19).
         03 ARG0-C REDEFINES ARG0-A.
           05 FILLER      PIC X(6).
           05 ARG0-D.
             07 ARG0-3    PIC 9(1) OCCURS 22.
       01 ARG1            POINTER.
       01 ARG2            POINTER.
       01 ARG3            POINTER.
       01 ARG4            POINTER.
       01 ARG5            POINTER.
       01 ARG6            POINTER.
       01 ARG7            POINTER.
       01 ARG8            POINTER.
       01 ARG9            POINTER.
       01 ARG10           POINTER.
       01 AZ-CICS-TARGET-NAME-DEF4 PIC X(4).
       01 AZ-CICS-TARGET-NAME-DEF7 PIC X(7).
       01 AZ-CICS-TARGET-NAME-DEF8 PIC X(8).
      *  *** W-COMMUNICATION-AREA : ZUT0000009A
       1 ZUT0000009A.
      *    *** PROCESS-INDICATOR : ZUT0000009B
         10 ZUT0000009B PIC X.
      *    *** EPSPCOM-PRINCIPLE-DATA : ZUT0000009C
         10 ZUT0000009C PIC S9(9)V99 COMP.
      *    *** EPSPCOM-NUMBER-OF-YEARS : ZUT0000009D
         10 ZUT0000009D PIC S9(4) COMP.
      *    *** EPSPCOM-NUMBER-OF-MONTHS : ZUT0000009E
         10 ZUT0000009E PIC S9(4) COMP.
      *    *** EPSPCOM-QUOTED-INTEREST-RATE : ZUT0000009F
         10 ZUT0000009F PIC S9(2)v9(3) COMP.
      *    *** EPSPCOM-YEAR-MONTH-IND : ZUT000000A0
         10 ZUT000000A0 PIC X.
      *    *** EPSPCOM-RETURN-MONTH-PAYMENT : ZUT000000A1
         10 ZUT000000A1 PIC S9(7)V99 COMP.
      *    *** EPSPCOM-ERRMSG : ZUT000000A2
         10 ZUT000000A2 PIC X(80).
      *    *** EPSPCOM-PROGRAM-RETCODE : ZUT000000A3
         10 ZUT000000A3 PIC 9(4).
      *    *** EPS02-REQUEST-SUCCESS : ZUT000000A4
         88 ZUT000000A4 VALUE 0.
          10 ZUT000000A3-AZ REDEFINES ZUT000000A3.
          11 PIC X(4) DISPLAY.
      *    *** EPSPCOM-PROGRAM-RETCODE-RDF : ZUT000000A5
         10 ZUT000000A5 REDEFINES ZUT000000A3 PIC X(4).
      *  *** W-COMAREA-LENGTH : ZUT0000000F
       1 ZUT0000000F PIC 9(4) COMP.
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
      * CICS_INPT_0E08_EPSCMORT.
           ENTRY 'CICS_INPT_0E08_EPSCMORT' USING AZ-TEST
           AZ-INFO-BLOCK AZ-DFHEIBLK AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10.
           DISPLAY 'AZU0000I CICS_0E08_EPSCMORT CHECK VALUES...'
           MOVE 4 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'E000' TO AZ-OPT-COMMASK-DATA2(1).
      * EXEC CICS RETURN X'0000'
           IF ARG0-1 = X'0E08'
             MOVE X'0000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-OPT-RC = 0 THEN
               MOVE 3 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS RETURN X''0000'''
                ' L=' AZ-LINE-NUM
               MOVE 3 TO AZ-GRP-INDEX
               MOVE 0 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-OT(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN 'TEST2'
                   PERFORM O0E080-TEST2
                   CONTINUE
                 WHEN 'TEST3'
                   PERFORM O0E080-TEST3
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
      * EXEC CICS RETURN X'E000'
           IF ARG0-1 = X'0E08'
             MOVE X'E000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-OPT-RC = 0 THEN
               MOVE 3 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS RETURN X''E000'''
                ' L=' AZ-LINE-NUM
               SET ADDRESS OF ZUT0000009A TO ADDRESS OF ARG2
               SET ADDRESS OF ZUT0000000F TO ADDRESS OF ARG3
               MOVE 4 TO AZ-GRP-INDEX
               MOVE 0 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-OT(2)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN 'TEST1'
                   PERFORM O0E081-TEST1
                   CONTINUE
                 WHEN 'TEST2'
                   PERFORM O0E081-TEST2
                   CONTINUE
                 WHEN 'TEST3'
                   PERFORM O0E081-TEST3
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
      * SET INPUT VALUE
      * CICS_OUTP_0E08_EPSCMORT.
           ENTRY 'CICS_OUTP_0E08_EPSCMORT' USING AZ-TEST
           AZ-INFO-BLOCK AZ-DFHEIBLK AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10.
           DISPLAY 'AZU0000I CICS_0E08_EPSCMORT INPUT VALUES...'
           MOVE 0 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'E000' TO AZ-OPT-COMMASK-DATA2(1).
      * EXEC CICS RETURN X'0000'
           IF ARG0-1 = X'0E08'
             MOVE X'0000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-OPT-RC = 0 THEN
               MOVE 3 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS RETURN X''0000'''
                ' L=' AZ-LINE-NUM
               MOVE 3 TO AZ-GRP-INDEX
               MOVE 1 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-IN(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN 'TEST2'
                   CONTINUE
                 WHEN 'TEST3'
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
      * EXEC CICS RETURN X'E000'
           IF ARG0-1 = X'0E08'
             MOVE X'E000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-OPT-RC = 0 THEN
               MOVE 3 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS RETURN X''E000'''
                ' L=' AZ-LINE-NUM
               SET ADDRESS OF ZUT0000009A TO ADDRESS OF ARG2
               SET ADDRESS OF ZUT0000000F TO ADDRESS OF ARG3
               MOVE 4 TO AZ-GRP-INDEX
               MOVE 1 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-IN(2)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN 'TEST1'
                   CONTINUE
                 WHEN 'TEST2'
                   CONTINUE
                 WHEN 'TEST3'
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
       O0E080-TEST2.
           MOVE 0 TO RETURN-CODE
           IF AZ-RECORD-COUNT-OT(1) = 0 THEN
             CONTINUE
           ELSE
             CONTINUE
           END-IF.
       O0E080-TEST3.
           MOVE 0 TO RETURN-CODE
           IF AZ-RECORD-COUNT-OT(1) = 0 THEN
             CONTINUE
           ELSE
             CONTINUE
           END-IF.
       O0E081-TEST1.
           INITIALIZE AZ-COMPARE-WORK-ITEMS
           MOVE 0 TO RETURN-CODE
           IF AZ-RECORD-COUNT-OT(2) = 0 THEN
             CONTINUE
           ELSE IF AZ-RECORD-COUNT-OT(2) = 1
             MOVE 0 TO RETURN-CODE
             IF ZUT0000009B OF ZUT0000009A = AZU00000000 THEN
               CONTINUE
             ELSE
               MOVE ZUT0000009B OF ZUT0000009A TO AZU00000007(1)
               MOVE AZU00000000 TO AZU00000007(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000006
               MOVE LENGTH OF AZU00000006 TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU00000007(1)
               MOVE 1 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000007(2)
               MOVE 1 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT0000009C OF ZUT0000009A = 0 THEN
               CONTINUE
             ELSE
                MOVE ZUT0000009C OF ZUT0000009A TO AZU00000009(1)
               MOVE 0 TO AZU00000009(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000008
               MOVE LENGTH OF AZU00000008 TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU00000009(1)
               MOVE 13 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000009(2)
               MOVE 13 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT0000009D OF ZUT0000009A = 0 THEN
               CONTINUE
             ELSE
                MOVE ZUT0000009D OF ZUT0000009A TO AZU0000000B(1)
               MOVE 0 TO AZU0000000B(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000000A
               MOVE LENGTH OF AZU0000000A TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU0000000B(1)
               MOVE 5 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000000B(2)
               MOVE 5 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT0000009E OF ZUT0000009A = 0 THEN
               CONTINUE
             ELSE
                MOVE ZUT0000009E OF ZUT0000009A TO AZU0000000D(1)
               MOVE 0 TO AZU0000000D(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000000C
               MOVE LENGTH OF AZU0000000C TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU0000000D(1)
               MOVE 5 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000000D(2)
               MOVE 5 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT0000009F OF ZUT0000009A = 0 THEN
               CONTINUE
             ELSE
                MOVE ZUT0000009F OF ZUT0000009A TO AZU0000000F(1)
               MOVE 0 TO AZU0000000F(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000000E
               MOVE LENGTH OF AZU0000000E TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU0000000F(1)
               MOVE 7 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000000F(2)
               MOVE 7 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT000000A1 OF ZUT0000009A = 0 THEN
               CONTINUE
             ELSE
                MOVE ZUT000000A1 OF ZUT0000009A TO AZU00000011(1)
               MOVE 0 TO AZU00000011(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000010
               MOVE LENGTH OF AZU00000010 TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU00000011(1)
               MOVE 11 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000011(2)
               MOVE 11 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT000000A3-AZ OF ZUT0000009A = AZU00000001 THEN
               CONTINUE
             ELSE
               PERFORM VARYING AZ-I FROM 1 BY 1 UNTIL AZ-I > 4
                 MOVE ZUT000000A3-AZ OF ZUT0000009A(AZ-I:1) TO
           AZ-CONVERT-HEXIN
                 PERFORM CONVERT
                 COMPUTE AZ-J = AZ-I * 2 - 1
                 MOVE AZ-CONVERT-HEXVAL TO AZU00000013(1)(AZ-J:2)
               END-PERFORM
               PERFORM VARYING AZ-I FROM 1 BY 1 UNTIL AZ-I > 4
                 MOVE AZU00000001(AZ-I:1) TO AZ-CONVERT-HEXIN
                 PERFORM CONVERT
                 COMPUTE AZ-J = AZ-I * 2 - 1
                 MOVE AZ-CONVERT-HEXVAL TO AZU00000013(2)(AZ-J:2)
               END-PERFORM
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000012
               MOVE LENGTH OF AZU00000012 TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU00000013(1)
               MOVE 8 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000013(2)
               MOVE 8 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT0000000F = 106 THEN
               CONTINUE
             ELSE
                MOVE ZUT0000000F TO AZU00000015(1)
               MOVE 106 TO AZU00000015(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000014
               MOVE LENGTH OF AZU00000014 TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU00000015(1)
               MOVE 4 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000015(2)
               MOVE 4 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''LENGTH'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
           ELSE
             CONTINUE
           END-IF
           END-IF.
       O0E081-TEST2.
           INITIALIZE AZ-COMPARE-WORK-ITEMS
           MOVE 0 TO RETURN-CODE
           IF AZ-RECORD-COUNT-OT(2) = 0 THEN
             CONTINUE
           ELSE IF AZ-RECORD-COUNT-OT(2) = 1
             MOVE 0 TO RETURN-CODE
             IF ZUT0000009B OF ZUT0000009A = AZU00000002 THEN
               CONTINUE
             ELSE
               MOVE ZUT0000009B OF ZUT0000009A TO AZU00000007(1)
               MOVE AZU00000002 TO AZU00000007(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000006
               MOVE LENGTH OF AZU00000006 TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU00000007(1)
               MOVE 1 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000007(2)
               MOVE 1 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT0000009C OF ZUT0000009A = 20000000.00 THEN
               CONTINUE
             ELSE
                MOVE ZUT0000009C OF ZUT0000009A TO AZU00000009(1)
               MOVE 20000000.00 TO AZU00000009(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000008
               MOVE LENGTH OF AZU00000008 TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU00000009(1)
               MOVE 13 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000009(2)
               MOVE 13 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT0000009D OF ZUT0000009A = 10 THEN
               CONTINUE
             ELSE
                MOVE ZUT0000009D OF ZUT0000009A TO AZU0000000B(1)
               MOVE 10 TO AZU0000000B(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000000A
               MOVE LENGTH OF AZU0000000A TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU0000000B(1)
               MOVE 5 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000000B(2)
               MOVE 5 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT0000009E OF ZUT0000009A = 0 THEN
               CONTINUE
             ELSE
                MOVE ZUT0000009E OF ZUT0000009A TO AZU0000000D(1)
               MOVE 0 TO AZU0000000D(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000000C
               MOVE LENGTH OF AZU0000000C TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU0000000D(1)
               MOVE 5 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000000D(2)
               MOVE 5 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT0000009F OF ZUT0000009A = 2.500 THEN
               CONTINUE
             ELSE
                MOVE ZUT0000009F OF ZUT0000009A TO AZU0000000F(1)
               MOVE 2.500 TO AZU0000000F(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000000E
               MOVE LENGTH OF AZU0000000E TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU0000000F(1)
               MOVE 7 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000000F(2)
               MOVE 7 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT000000A0 OF ZUT0000009A = AZU00000003 THEN
               CONTINUE
             ELSE
               MOVE ZUT000000A0 OF ZUT0000009A TO AZU00000017(1)
               MOVE AZU00000003 TO AZU00000017(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000016
               MOVE LENGTH OF AZU00000016 TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU00000017(1)
               MOVE 1 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000017(2)
               MOVE 1 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT000000A1 OF ZUT0000009A = 188539.80 THEN
               CONTINUE
             ELSE
                MOVE ZUT000000A1 OF ZUT0000009A TO AZU00000011(1)
               MOVE 188539.80 TO AZU00000011(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000010
               MOVE LENGTH OF AZU00000010 TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU00000011(1)
               MOVE 11 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000011(2)
               MOVE 11 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT000000A2 OF ZUT0000009A = AZU00000004 THEN
               CONTINUE
             ELSE
               MOVE ZUT000000A2 OF ZUT0000009A TO AZU00000019(1)
               MOVE AZU00000004 TO AZU00000019(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000018
               MOVE LENGTH OF AZU00000018 TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU00000019(1)
               MOVE 80 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000019(2)
               MOVE 80 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT000000A5 OF ZUT0000009A = AZU00000005 THEN
               CONTINUE
             ELSE
               MOVE ZUT000000A5 OF ZUT0000009A TO AZU0000001B(1)
               MOVE AZU00000005 TO AZU0000001B(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU0000001A
               MOVE LENGTH OF AZU0000001A TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU0000001B(1)
               MOVE 4 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU0000001B(2)
               MOVE 4 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''COMMAREA'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
             IF ZUT0000000F = 106 THEN
               CONTINUE
             ELSE
                MOVE ZUT0000000F TO AZU00000015(1)
               MOVE 106 TO AZU00000015(2)
               SET AZ-COMPARE-ITEM-NAME-PTR TO ADDRESS OF AZU00000014
               MOVE LENGTH OF AZU00000014 TO AZ-COMPARE-ITEM-NAME-LEN
               SET AZ-COMPARE-ITEM-VALUE-PTR TO ADDRESS OF
           AZU00000015(1)
               MOVE 4 TO AZ-COMPARE-ITEM-VALUE-LEN
               SET AZ-COMPARE-ITEM-EXP-VALUE-PTR TO ADDRESS OF
           AZU00000015(2)
               MOVE 4 TO AZ-COMPARE-ITEM-EXP-VALUE-LEN
               MOVE 1 TO MESSAGE-LEN OF BZ-ASSERT
               STRING
                 'COMPARE FAILED AT RECORD 1 '
                 '''LENGTH'' '
                 'IN EXEC CICS RETURN '
                 '(LISTINGLINE=' AZ-LINE-NUM ').'
                 DELIMITED BY SIZE INTO MESSAGE-TXT OF BZ-ASSERT
                 WITH POINTER MESSAGE-LEN OF BZ-ASSERT
               END-STRING
               SUBTRACT 1 FROM MESSAGE-LEN OF BZ-ASSERT
               PERFORM THROW-ASSERTION
             END-IF
           ELSE
             CONTINUE
           END-IF
           END-IF.
       O0E081-TEST3.
           INITIALIZE AZ-COMPARE-WORK-ITEMS
           MOVE 0 TO RETURN-CODE
           IF AZ-RECORD-COUNT-OT(2) = 0 THEN
             CONTINUE
           ELSE
             CONTINUE
           END-IF.
       CONVERT.
           MOVE AZ-CONVERT-HEXIN TO AZ-DECBYTE
           DIVIDE AZ-DEC BY 16 GIVING AZ-Q REMAINDER AZ-R
           COMPUTE AZ-Q1 = AZ-Q + 1
           COMPUTE AZ-R1 = AZ-R + 1
           MOVE AZ-HEXSTR(AZ-Q1:1) TO AZ-CONVERT-HEXVAL(1:1)
           MOVE AZ-HEXSTR(AZ-R1:1) TO AZ-CONVERT-HEXVAL(2:1)
           EXIT.
       THROW-ASSERTION.
           SET ADDRESS OF AZ-COMPARE-ITEM-NAME TO
           AZ-COMPARE-ITEM-NAME-PTR.
           SET ADDRESS OF AZ-COMPARE-ITEM-VALUE TO
           AZ-COMPARE-ITEM-VALUE-PTR.
           SET ADDRESS OF AZ-COMPARE-ITEM-EXP-VALUE TO
           AZ-COMPARE-ITEM-EXP-VALUE-PTR.
      *    DISPLAY ERROR MESSAGE AND ENDS TEST
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           DISPLAY 'AZU2001W THE TEST "' AZ-TEST(1:AZ-TEST-LEN) '" FAILE
      -    'D DUE TO AN ASSERTION.'
           DISPLAY 'AZU1101I ' MESSAGE-TXT OF BZ-ASSERT(1:MESSAGE-LEN
           OF BZ-ASSERT)
           DISPLAY 'AZU0000I  DATA ITEM NAME : '
           AZ-COMPARE-ITEM-NAME(1:AZ-COMPARE-ITEM-NAME-LEN)
           DISPLAY 'AZU0000I   VALUE         : '
           AZ-COMPARE-ITEM-VALUE(1:AZ-COMPARE-ITEM-VALUE-LEN)
           DISPLAY 'AZU0000I   EXPECTED VALUE: '
           AZ-COMPARE-ITEM-EXP-VALUE(1:AZ-COMPARE-ITEM-EXP-VALUE-LEN)
           DISPLAY 'AZU0000I *******************************************
      -    '*************************************'
           CALL BZUASSRT USING BZ-P1 BZ-P2 BZ-P3 BZ-ASSERT
           MOVE 1 TO TRACE-LEN OF BZ-TRACE
           MOVE 1 TO AZ-ITEM-NAME-S
           PERFORM UNTIL AZ-ITEM-NAME-S > AZ-COMPARE-ITEM-NAME-LEN
             MOVE 206 TO AZ-ITEM-NAME-LEN
             IF AZ-ITEM-NAME-S + 206 > AZ-COMPARE-ITEM-NAME-LEN THEN
               MOVE AZ-COMPARE-ITEM-NAME-LEN TO AZ-ITEM-NAME-LEN
               SUBTRACT AZ-ITEM-NAME-S FROM AZ-ITEM-NAME-LEN
               ADD 1 TO AZ-ITEM-NAME-LEN
             END-IF
             STRING 'ITEM NAME='
             AZ-COMPARE-ITEM-NAME(AZ-ITEM-NAME-S:AZ-ITEM-NAME-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
             SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
             SET AZ-TRACE-PTR TO ADDRESS OF TRACE-TXT OF BZ-TRACE
             CALL BZUTRACE USING BZ-TRACE
             MOVE 1 TO TRACE-LEN OF BZ-TRACE
             ADD AZ-ITEM-NAME-LEN TO AZ-ITEM-NAME-S
           END-PERFORM
           STRING 'VALUE   ='
           AZ-COMPARE-ITEM-VALUE(1:AZ-COMPARE-ITEM-VALUE-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
           SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
           CALL BZUTRACE USING BZ-TRACE
           MOVE 1 TO TRACE-LEN OF BZ-TRACE
           STRING 'EXPECTED='
           AZ-COMPARE-ITEM-EXP-VALUE(1:AZ-COMPARE-ITEM-EXP-VALUE-LEN)
               DELIMITED BY SIZE INTO TRACE-TXT OF BZ-TRACE
               WITH POINTER TRACE-LEN OF BZ-TRACE
             END-STRING
           SUBTRACT 1 FROM TRACE-LEN OF BZ-TRACE
           CALL BZUTRACE USING BZ-TRACE
           EXIT.
       GETLINENUM.
           MOVE 1 TO AZ-LINE-J
           PERFORM VARYING AZ-LINE-I FROM AZ-LINE-BYTE BY 1
             UNTIL AZ-LINE-I > AZ-LINE-BYTE + 4
             MOVE ARG0-3(AZ-LINE-I) TO AZ-LINE-NUM-RD(AZ-LINE-J)
             ADD 1 TO AZ-LINE-J
           END-PERFORM
           EXIT.
       TEARDOWN.
           DISPLAY 'AZU0000I CICS_0E08_EPSCMORT END.'
           GOBACK.
       END PROGRAM 'CICS_0E08_EPSCMORT'.
      *+---------------------------------------------------------------+
      *| ZUNIT PROGRAM FOR EXEC CICS SEND MAP                          |
      *|    FUNCTION CODE: 1804                                        |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'CICS_1804_EPSCMORT'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM CICS CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-TRACE-PTR      POINTER.
       01 AZ-TEST-LEN       PIC S9(8) COMP.
       01 AZ-RECORD.
         03 AZ-RECORD-COUNT-OT OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
         03 AZ-RECORD-COUNT-IN OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
       01 AZ-GRP-INDEX       PIC 9(8).
       01 AZ-FLAG-IN         PIC 9(1).
       01 AZ-RECORD-PTR      POINTER.
       01 AZ-OPT-MASK-DATA2  PIC X(2).
       01 AZ-OPT-MASK-DATA9  PIC X(9).
       01 AZ-OPT-MASK-DATA11 PIC X(11).
       01 AZ-OPT-MASK-DATA19 PIC X(19).
       01 AZ-OPT-BYTECOUNT   PIC S9(8) COMP.
       01 AZ-OPT-RC          PIC 9(1) VALUE 0.
       01 AZ-OPT-COMMASK.
         03  AZ-OPT-COMMASK-DATA2  PIC X(2) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA9  PIC X(9) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA11 PIC X(11) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA19 PIC X(19) OCCURS 1.
       01 AZ-LINE-BYTE      PIC S9(2) COMP.
       01 AZ-LINE-NUM       PIC 9(5).
       01 AZ-LINE-NUM-R   REDEFINES AZ-LINE-NUM.
         03 AZ-LINE-NUM-RD  PIC 9(1) OCCURS 5.
       01 AZ-LINE-I         PIC S9(8) COMP.
       01 AZ-LINE-J         PIC S9(8) COMP.
       01 AZ-RC-WORK        PIC S9(4) USAGE BINARY.
       LOCAL-STORAGE SECTION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY BZUITERC.
       01 AZ-WK-RECORD-COUNT PIC 9(5) COMP-5.
       01 AZ-MODX                   PIC X(4).
       01 AZ-DFHEIBLK.
         03 FILLER                  PIC X(85).
       01 AZ-DFHCOMMAREA.
         03 FILLER                  PIC X(1).
       01 ARG0.
         03 ARG0-1        PIC X(2).
         03 ARG0-A        PIC X(28).
         03 ARG0-B REDEFINES ARG0-A.
           05 ARG0-2      PIC X(9).
           05 FILLER      PIC X(19).
         03 ARG0-C REDEFINES ARG0-A.
           05 FILLER      PIC X(6).
           05 ARG0-D.
             07 ARG0-3    PIC 9(1) OCCURS 22.
       01 ARG1            POINTER.
       01 ARG2            POINTER.
       01 ARG3            POINTER.
       01 ARG4            POINTER.
       01 ARG5            POINTER.
       01 ARG6            POINTER.
       01 ARG7            POINTER.
       01 ARG8            POINTER.
       01 ARG9            POINTER.
       01 ARG10           POINTER.
       01 ARG11           POINTER.
       01 ARG12           POINTER.
       01 ARG13           POINTER.
       01 ARG14           POINTER.
       01 ARG15           POINTER.
       01 AZ-CICS-TARGET-NAME-DEF4 PIC X(4).
       01 AZ-CICS-TARGET-NAME-DEF7 PIC X(7).
       01 AZ-CICS-TARGET-NAME-DEF8 PIC X(8).
      *  *** DFHEIBLK : ZUT000000AD
       1 ZUT000000AD.
      *    *** EIBTIME : ZUT000000AE
         2 ZUT000000AE PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBDATE : ZUT000000AF
         2 ZUT000000AF PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRNID : ZUT000000B0
         2 ZUT000000B0 PICTURE X(4).
      *    *** EIBTASKN : ZUT000000B1
         2 ZUT000000B1 PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRMID : ZUT000000B2
         2 ZUT000000B2 PICTURE X(4).
      *    *** DFHEIGDI : ZUT000000B3
         2 ZUT000000B3 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCPOSN : ZUT000000B4
         2 ZUT000000B4 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCALEN : ZUT000000B5
         2 ZUT000000B5 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBAID : ZUT000000B6
         2 ZUT000000B6 PICTURE X(1).
      *    *** EIBFN : ZUT000000B7
         2 ZUT000000B7 PICTURE X(2).
      *    *** EIBRCODE : ZUT000000B8
         2 ZUT000000B8 PICTURE X(6).
      *    *** EIBDS : ZUT000000B9
         2 ZUT000000B9 PICTURE X(8).
      *    *** EIBREQID : ZUT000000BA
         2 ZUT000000BA PICTURE X(8).
      *    *** EIBRSRCE : ZUT000000BB
         2 ZUT000000BB PICTURE X(8).
      *    *** EIBSYNC : ZUT000000BC
         2 ZUT000000BC PICTURE X.
      *    *** EIBFREE : ZUT000000BD
         2 ZUT000000BD PICTURE X.
      *    *** EIBRECV : ZUT000000BE
         2 ZUT000000BE PICTURE X.
      *    *** EIBSEND : ZUT000000BF
         2 ZUT000000BF PICTURE X.
      *    *** EIBATT : ZUT000000C0
         2 ZUT000000C0 PICTURE X.
      *    *** EIBEOC : ZUT000000C1
         2 ZUT000000C1 PICTURE X.
      *    *** EIBFMH : ZUT000000C2
         2 ZUT000000C2 PICTURE X.
      *    *** EIBCOMPL : ZUT000000C3
         2 ZUT000000C3 PICTURE X(1).
      *    *** EIBSIG : ZUT000000C4
         2 ZUT000000C4 PICTURE X(1).
      *    *** EIBCONF : ZUT000000C5
         2 ZUT000000C5 PICTURE X(1).
      *    *** EIBERR : ZUT000000C6
         2 ZUT000000C6 PICTURE X(1).
      *    *** EIBERRCD : ZUT000000C7
         2 ZUT000000C7 PICTURE X(4).
      *    *** EIBSYNRB : ZUT000000C8
         2 ZUT000000C8 PICTURE X.
      *    *** EIBNODAT : ZUT000000C9
         2 ZUT000000C9 PICTURE X.
      *    *** EIBRESP : ZUT000000CA
         2 ZUT000000CA PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRESP2 : ZUT000000CB
         2 ZUT000000CB PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRLDBK : ZUT000000CC
         2 ZUT000000CC PICTURE X(1).
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
      * CICS_INPT_1804_EPSCMORT.
           ENTRY 'CICS_INPT_1804_EPSCMORT' USING AZ-TEST
           AZ-INFO-BLOCK ZUT000000AD AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10 ARG11 ARG12 ARG13
           ARG14 ARG15.
           DISPLAY 'AZU0000I CICS_1804_EPSCMORT CHECK VALUES...'
           MOVE 4 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * EXEC CICS SEND MAP "EPMENU"
           IF ARG0-1 = X'1804'
             SET ADDRESS OF AZ-CICS-TARGET-NAME-DEF7 TO ADDRESS OF ARG1
             IF AZ-CICS-TARGET-NAME-DEF7 = 'EPMENU'
               MOVE 9 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS SEND MAP "EPMENU"'
               ' L=' AZ-LINE-NUM
               MOVE 5 TO AZ-GRP-INDEX
               MOVE 0 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-OT(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
      * SET INPUT VALUE
      * CICS_OUTP_1804_EPSCMORT.
           ENTRY 'CICS_OUTP_1804_EPSCMORT' USING AZ-TEST
           AZ-INFO-BLOCK ZUT000000AD AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10 ARG11 ARG12 ARG13
           ARG14 ARG15.
           DISPLAY 'AZU0000I CICS_1804_EPSCMORT INPUT VALUES...'
           MOVE 0 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * EXEC CICS SEND MAP "EPMENU"
           IF ARG0-1 = X'1804'
             SET ADDRESS OF AZ-CICS-TARGET-NAME-DEF7 TO ADDRESS OF ARG1
             IF AZ-CICS-TARGET-NAME-DEF7 = 'EPMENU'
               MOVE 9 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS SEND MAP "EPMENU"'
               ' L=' AZ-LINE-NUM
               MOVE 5 TO AZ-GRP-INDEX
               MOVE 1 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-IN(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
       GETLINENUM.
           MOVE 1 TO AZ-LINE-J
           PERFORM VARYING AZ-LINE-I FROM AZ-LINE-BYTE BY 1
             UNTIL AZ-LINE-I > AZ-LINE-BYTE + 4
             MOVE ARG0-3(AZ-LINE-I) TO AZ-LINE-NUM-RD(AZ-LINE-J)
             ADD 1 TO AZ-LINE-J
           END-PERFORM
           EXIT.
       TEARDOWN.
           DISPLAY 'AZU0000I CICS_1804_EPSCMORT END.'
           GOBACK.
       END PROGRAM 'CICS_1804_EPSCMORT'.
      *+---------------------------------------------------------------+
      *| ZUNIT PROGRAM FOR EXEC CICS RECEIVE MAP                       |
      *|    FUNCTION CODE: 1802                                        |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'CICS_1802_EPSCMORT'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM CICS CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-TRACE-PTR      POINTER.
       01 AZ-TEST-LEN       PIC S9(8) COMP.
       01 AZ-RECORD.
         03 AZ-RECORD-COUNT-OT OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
         03 AZ-RECORD-COUNT-IN OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
       01 AZ-GRP-INDEX       PIC 9(8).
       01 AZ-FLAG-IN         PIC 9(1).
       01 AZ-RECORD-PTR      POINTER.
       01 AZ-OPT-MASK-DATA2  PIC X(2).
       01 AZ-OPT-MASK-DATA9  PIC X(9).
       01 AZ-OPT-MASK-DATA11 PIC X(11).
       01 AZ-OPT-MASK-DATA19 PIC X(19).
       01 AZ-OPT-BYTECOUNT   PIC S9(8) COMP.
       01 AZ-OPT-RC          PIC 9(1) VALUE 0.
       01 AZ-OPT-COMMASK.
         03  AZ-OPT-COMMASK-DATA2  PIC X(2) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA9  PIC X(9) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA11 PIC X(11) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA19 PIC X(19) OCCURS 1.
       01 AZ-LINE-BYTE      PIC S9(2) COMP.
       01 AZ-LINE-NUM       PIC 9(5).
       01 AZ-LINE-NUM-R   REDEFINES AZ-LINE-NUM.
         03 AZ-LINE-NUM-RD  PIC 9(1) OCCURS 5.
       01 AZ-LINE-I         PIC S9(8) COMP.
       01 AZ-LINE-J         PIC S9(8) COMP.
       01 AZ-RC-WORK        PIC S9(4) USAGE BINARY.
       LOCAL-STORAGE SECTION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY BZUITERC.
       01 AZ-WK-RECORD-COUNT PIC 9(5) COMP-5.
       01 AZ-MODX                   PIC X(4).
       01 AZ-DFHEIBLK.
         03 FILLER                  PIC X(85).
       01 AZ-DFHCOMMAREA.
         03 FILLER                  PIC X(1).
       01 ARG0.
         03 ARG0-1        PIC X(2).
         03 ARG0-A        PIC X(28).
         03 ARG0-B REDEFINES ARG0-A.
           05 ARG0-2      PIC X(9).
           05 FILLER      PIC X(19).
         03 ARG0-C REDEFINES ARG0-A.
           05 FILLER      PIC X(6).
           05 ARG0-D.
             07 ARG0-3    PIC 9(1) OCCURS 22.
       01 ARG1            POINTER.
       01 ARG2            POINTER.
       01 ARG3            POINTER.
       01 ARG4            POINTER.
       01 ARG5            POINTER.
       01 ARG6            POINTER.
       01 ARG7            POINTER.
       01 ARG8            POINTER.
       01 ARG9            POINTER.
       01 ARG10           POINTER.
       01 AZ-CICS-TARGET-NAME-DEF4 PIC X(4).
       01 AZ-CICS-TARGET-NAME-DEF7 PIC X(7).
       01 AZ-CICS-TARGET-NAME-DEF8 PIC X(8).
      *  *** DFHEIBLK : ZUT000000AD
       1 ZUT000000AD.
      *    *** EIBTIME : ZUT000000AE
         2 ZUT000000AE PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBDATE : ZUT000000AF
         2 ZUT000000AF PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRNID : ZUT000000B0
         2 ZUT000000B0 PICTURE X(4).
      *    *** EIBTASKN : ZUT000000B1
         2 ZUT000000B1 PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRMID : ZUT000000B2
         2 ZUT000000B2 PICTURE X(4).
      *    *** DFHEIGDI : ZUT000000B3
         2 ZUT000000B3 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCPOSN : ZUT000000B4
         2 ZUT000000B4 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCALEN : ZUT000000B5
         2 ZUT000000B5 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBAID : ZUT000000B6
         2 ZUT000000B6 PICTURE X(1).
      *    *** EIBFN : ZUT000000B7
         2 ZUT000000B7 PICTURE X(2).
      *    *** EIBRCODE : ZUT000000B8
         2 ZUT000000B8 PICTURE X(6).
      *    *** EIBDS : ZUT000000B9
         2 ZUT000000B9 PICTURE X(8).
      *    *** EIBREQID : ZUT000000BA
         2 ZUT000000BA PICTURE X(8).
      *    *** EIBRSRCE : ZUT000000BB
         2 ZUT000000BB PICTURE X(8).
      *    *** EIBSYNC : ZUT000000BC
         2 ZUT000000BC PICTURE X.
      *    *** EIBFREE : ZUT000000BD
         2 ZUT000000BD PICTURE X.
      *    *** EIBRECV : ZUT000000BE
         2 ZUT000000BE PICTURE X.
      *    *** EIBSEND : ZUT000000BF
         2 ZUT000000BF PICTURE X.
      *    *** EIBATT : ZUT000000C0
         2 ZUT000000C0 PICTURE X.
      *    *** EIBEOC : ZUT000000C1
         2 ZUT000000C1 PICTURE X.
      *    *** EIBFMH : ZUT000000C2
         2 ZUT000000C2 PICTURE X.
      *    *** EIBCOMPL : ZUT000000C3
         2 ZUT000000C3 PICTURE X(1).
      *    *** EIBSIG : ZUT000000C4
         2 ZUT000000C4 PICTURE X(1).
      *    *** EIBCONF : ZUT000000C5
         2 ZUT000000C5 PICTURE X(1).
      *    *** EIBERR : ZUT000000C6
         2 ZUT000000C6 PICTURE X(1).
      *    *** EIBERRCD : ZUT000000C7
         2 ZUT000000C7 PICTURE X(4).
      *    *** EIBSYNRB : ZUT000000C8
         2 ZUT000000C8 PICTURE X.
      *    *** EIBNODAT : ZUT000000C9
         2 ZUT000000C9 PICTURE X.
      *    *** EIBRESP : ZUT000000CA
         2 ZUT000000CA PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRESP2 : ZUT000000CB
         2 ZUT000000CB PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRLDBK : ZUT000000CC
         2 ZUT000000CC PICTURE X(1).
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
      * CICS_INPT_1802_EPSCMORT.
           ENTRY 'CICS_INPT_1802_EPSCMORT' USING AZ-TEST
           AZ-INFO-BLOCK ZUT000000AD AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10.
           DISPLAY 'AZU0000I CICS_1802_EPSCMORT CHECK VALUES...'
           MOVE 4 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * EXEC CICS RECEIVE MAP "EPMENU"
           IF ARG0-1 = X'1802'
             SET ADDRESS OF AZ-CICS-TARGET-NAME-DEF7 TO ADDRESS OF ARG1
             IF AZ-CICS-TARGET-NAME-DEF7 = 'EPMENU'
               MOVE 9 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS RECEIVE MAP "EPMENU"'
               ' L=' AZ-LINE-NUM
               MOVE 6 TO AZ-GRP-INDEX
               MOVE 0 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-OT(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
      * SET INPUT VALUE
      * CICS_OUTP_1802_EPSCMORT.
           ENTRY 'CICS_OUTP_1802_EPSCMORT' USING AZ-TEST
           AZ-INFO-BLOCK ZUT000000AD AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10.
           DISPLAY 'AZU0000I CICS_1802_EPSCMORT INPUT VALUES...'
           MOVE 0 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * EXEC CICS RECEIVE MAP "EPMENU"
           IF ARG0-1 = X'1802'
             SET ADDRESS OF AZ-CICS-TARGET-NAME-DEF7 TO ADDRESS OF ARG1
             IF AZ-CICS-TARGET-NAME-DEF7 = 'EPMENU'
               MOVE 9 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS RECEIVE MAP "EPMENU"'
               ' L=' AZ-LINE-NUM
               MOVE 6 TO AZ-GRP-INDEX
               MOVE 1 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-IN(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
       GETLINENUM.
           MOVE 1 TO AZ-LINE-J
           PERFORM VARYING AZ-LINE-I FROM AZ-LINE-BYTE BY 1
             UNTIL AZ-LINE-I > AZ-LINE-BYTE + 4
             MOVE ARG0-3(AZ-LINE-I) TO AZ-LINE-NUM-RD(AZ-LINE-J)
             ADD 1 TO AZ-LINE-J
           END-PERFORM
           EXIT.
       TEARDOWN.
           DISPLAY 'AZU0000I CICS_1802_EPSCMORT END.'
           GOBACK.
       END PROGRAM 'CICS_1802_EPSCMORT'.
      *+---------------------------------------------------------------+
      *| ZUNIT PROGRAM FOR EXEC CICS LINK                              |
      *|    FUNCTION CODE: 0E02                                        |
      *| TEST CASE VERSION: 102                                        |
      *+---------------------------------------------------------------+
       IDENTIFICATION DIVISION.
       PROGRAM-ID. 'CICS_0E02_EPSCMORT'.
       DATA DIVISION.
       WORKING-STORAGE SECTION.
       01 BZ-ASSERT.
         03 MESSAGE-LEN PIC S9(4) COMP-4 VALUE 24.
         03 MESSAGE-TXT PIC X(254) VALUE 'HELLO FROM CICS CALLBACK'.
       01  BZ-P1 PIC S9(9) COMP-4 VALUE 4.
       01  BZ-P2 PIC S9(9) COMP-4 VALUE 2001.
       01  BZ-P3 PIC X(3) VALUE 'AZU'.
       01 BZ-TRACE.
         03 TRACE-LEN       PIC S9(4) COMP-4 VALUE 5.
         03 TRACE-TXT       PIC X(254) VALUE 'TRACE'.
       01 BZUASSRT          PIC X(8) VALUE 'BZUASSRT'.
       01 BZUTRACE          PIC X(8) VALUE 'BZUTRACE'.
       01 AZ-TRACE-PTR      POINTER.
       01 AZ-TEST-LEN       PIC S9(8) COMP.
       01 AZ-RECORD.
         03 AZ-RECORD-COUNT-OT OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
         03 AZ-RECORD-COUNT-IN OCCURS 1 PIC 9(5) COMP-5 VALUE 0.
       01 AZ-GRP-INDEX       PIC 9(8).
       01 AZ-FLAG-IN         PIC 9(1).
       01 AZ-RECORD-PTR      POINTER.
       01 AZ-OPT-MASK-DATA2  PIC X(2).
       01 AZ-OPT-MASK-DATA9  PIC X(9).
       01 AZ-OPT-MASK-DATA11 PIC X(11).
       01 AZ-OPT-MASK-DATA19 PIC X(19).
       01 AZ-OPT-BYTECOUNT   PIC S9(8) COMP.
       01 AZ-OPT-RC          PIC 9(1) VALUE 0.
       01 AZ-OPT-COMMASK.
         03  AZ-OPT-COMMASK-DATA2  PIC X(2) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA9  PIC X(9) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA11 PIC X(11) OCCURS 1.
         03  AZ-OPT-COMMASK-DATA19 PIC X(19) OCCURS 1.
       01 AZ-LINE-BYTE      PIC S9(2) COMP.
       01 AZ-LINE-NUM       PIC 9(5).
       01 AZ-LINE-NUM-R   REDEFINES AZ-LINE-NUM.
         03 AZ-LINE-NUM-RD  PIC 9(1) OCCURS 5.
       01 AZ-LINE-I         PIC S9(8) COMP.
       01 AZ-LINE-J         PIC S9(8) COMP.
       01 AZ-RC-WORK        PIC S9(4) USAGE BINARY.
       LOCAL-STORAGE SECTION.
       LINKAGE SECTION.
       01 AZ-TEST                   PIC X(80).
       01 AZ-INFO-BLOCK.
          COPY BZUITERC.
       01 AZ-WK-RECORD-COUNT PIC 9(5) COMP-5.
       01 AZ-MODX                   PIC X(4).
       01 AZ-DFHEIBLK.
         03 FILLER                  PIC X(85).
       01 AZ-DFHCOMMAREA.
         03 FILLER                  PIC X(1).
       01 ARG0.
         03 ARG0-1        PIC X(2).
         03 ARG0-A        PIC X(28).
         03 ARG0-B REDEFINES ARG0-A.
           05 ARG0-2      PIC X(9).
           05 FILLER      PIC X(19).
         03 ARG0-C REDEFINES ARG0-A.
           05 FILLER      PIC X(6).
           05 ARG0-D.
             07 ARG0-3    PIC 9(1) OCCURS 22.
       01 ARG1            POINTER.
       01 ARG2            POINTER.
       01 ARG3            POINTER.
       01 ARG4            POINTER.
       01 ARG5            POINTER.
       01 ARG6            POINTER.
       01 ARG7            POINTER.
       01 ARG8            POINTER.
       01 ARG9            POINTER.
       01 ARG10           POINTER.
       01 AZ-CICS-TARGET-NAME-DEF4 PIC X(4).
       01 AZ-CICS-TARGET-NAME-DEF7 PIC X(7).
       01 AZ-CICS-TARGET-NAME-DEF8 PIC X(8).
       01 AZ-CICS-TARGET-NAME-8 PIC X(8).
      *  *** DFHEIBLK : ZUT000000AD
       1 ZUT000000AD.
      *    *** EIBTIME : ZUT000000AE
         2 ZUT000000AE PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBDATE : ZUT000000AF
         2 ZUT000000AF PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRNID : ZUT000000B0
         2 ZUT000000B0 PICTURE X(4).
      *    *** EIBTASKN : ZUT000000B1
         2 ZUT000000B1 PICTURE S9(7) USAGE COMPUTATIONAL-3.
      *    *** EIBTRMID : ZUT000000B2
         2 ZUT000000B2 PICTURE X(4).
      *    *** DFHEIGDI : ZUT000000B3
         2 ZUT000000B3 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCPOSN : ZUT000000B4
         2 ZUT000000B4 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBCALEN : ZUT000000B5
         2 ZUT000000B5 PICTURE S9(4) USAGE COMPUTATIONAL-5.
      *    *** EIBAID : ZUT000000B6
         2 ZUT000000B6 PICTURE X(1).
      *    *** EIBFN : ZUT000000B7
         2 ZUT000000B7 PICTURE X(2).
      *    *** EIBRCODE : ZUT000000B8
         2 ZUT000000B8 PICTURE X(6).
      *    *** EIBDS : ZUT000000B9
         2 ZUT000000B9 PICTURE X(8).
      *    *** EIBREQID : ZUT000000BA
         2 ZUT000000BA PICTURE X(8).
      *    *** EIBRSRCE : ZUT000000BB
         2 ZUT000000BB PICTURE X(8).
      *    *** EIBSYNC : ZUT000000BC
         2 ZUT000000BC PICTURE X.
      *    *** EIBFREE : ZUT000000BD
         2 ZUT000000BD PICTURE X.
      *    *** EIBRECV : ZUT000000BE
         2 ZUT000000BE PICTURE X.
      *    *** EIBSEND : ZUT000000BF
         2 ZUT000000BF PICTURE X.
      *    *** EIBATT : ZUT000000C0
         2 ZUT000000C0 PICTURE X.
      *    *** EIBEOC : ZUT000000C1
         2 ZUT000000C1 PICTURE X.
      *    *** EIBFMH : ZUT000000C2
         2 ZUT000000C2 PICTURE X.
      *    *** EIBCOMPL : ZUT000000C3
         2 ZUT000000C3 PICTURE X(1).
      *    *** EIBSIG : ZUT000000C4
         2 ZUT000000C4 PICTURE X(1).
      *    *** EIBCONF : ZUT000000C5
         2 ZUT000000C5 PICTURE X(1).
      *    *** EIBERR : ZUT000000C6
         2 ZUT000000C6 PICTURE X(1).
      *    *** EIBERRCD : ZUT000000C7
         2 ZUT000000C7 PICTURE X(4).
      *    *** EIBSYNRB : ZUT000000C8
         2 ZUT000000C8 PICTURE X.
      *    *** EIBNODAT : ZUT000000C9
         2 ZUT000000C9 PICTURE X.
      *    *** EIBRESP : ZUT000000CA
         2 ZUT000000CA PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRESP2 : ZUT000000CB
         2 ZUT000000CB PICTURE S9(8) USAGE COMPUTATIONAL.
      *    *** EIBRLDBK : ZUT000000CC
         2 ZUT000000CC PICTURE X(1).
       PROCEDURE DIVISION.
      * CHECK OUTPUT VALUE
      * CICS_INPT_0E02_EPSCMORT.
           ENTRY 'CICS_INPT_0E02_EPSCMORT' USING AZ-TEST
           AZ-INFO-BLOCK ZUT000000AD AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10.
           DISPLAY 'AZU0000I CICS_0E02_EPSCMORT CHECK VALUES...'
           MOVE 4 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'E000' TO AZ-OPT-COMMASK-DATA2(1).
      * EXEC CICS LINK "EPSCSMRT" X'E000'
           IF ARG0-1 = X'0E02'
             SET ADDRESS OF AZ-CICS-TARGET-NAME-8 TO ADDRESS OF ARG1
             MOVE X'E000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-CICS-TARGET-NAME-8 = 'EPSCSMRT' AND
                AZ-OPT-RC = 0 THEN
               MOVE 3 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS LINK "EPSCSMRT" X''E000'''
               ' L=' AZ-LINE-NUM
               MOVE 7 TO AZ-GRP-INDEX
               MOVE 0 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-OT(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
      * SET INPUT VALUE
      * CICS_OUTP_0E02_EPSCMORT.
           ENTRY 'CICS_OUTP_0E02_EPSCMORT' USING AZ-TEST
           AZ-INFO-BLOCK ZUT000000AD AZ-DFHCOMMAREA ARG0 ARG1 ARG2
           ARG3 ARG4 ARG5 ARG6 ARG7 ARG8 ARG9 ARG10.
           DISPLAY 'AZU0000I CICS_0E02_EPSCMORT INPUT VALUES...'
           MOVE 0 TO RETURN-CODE.
           MOVE 0 TO AZ-TEST-LEN.
           INSPECT AZ-TEST TALLYING AZ-TEST-LEN FOR
           CHARACTERS BEFORE INITIAL SPACE.
      * SET GROUP OPTION COMMON MASK IN CICS GROUP
           MOVE X'E000' TO AZ-OPT-COMMASK-DATA2(1).
      * EXEC CICS LINK "EPSCSMRT" X'E000'
           IF ARG0-1 = X'0E02'
             SET ADDRESS OF AZ-CICS-TARGET-NAME-8 TO ADDRESS OF ARG1
             MOVE X'E000' TO AZ-OPT-MASK-DATA2
             MOVE 2 TO AZ-OPT-BYTECOUNT
             MOVE RETURN-CODE TO AZ-RC-WORK
             CALL 'EVALOPT' USING AZ-OPT-MASK-DATA2
               AZ-OPT-COMMASK-DATA2(1) ARG0-2
               AZ-OPT-BYTECOUNT AZ-OPT-RC
             MOVE AZ-RC-WORK TO RETURN-CODE
             IF AZ-CICS-TARGET-NAME-8 = 'EPSCSMRT' AND
                AZ-OPT-RC = 0 THEN
               MOVE 3 TO AZ-LINE-BYTE
               PERFORM GETLINENUM
               DISPLAY 'AZU0000I EXEC CICS LINK "EPSCSMRT" X''E000'''
               ' L=' AZ-LINE-NUM
               MOVE 7 TO AZ-GRP-INDEX
               MOVE 1 TO AZ-FLAG-IN
               MOVE RETURN-CODE TO AZ-RC-WORK
               CALL 'GTMEMRC' USING TC-WORK-AREA OF AZ-INFO-BLOCK
                 AZ-GRP-INDEX AZ-FLAG-IN AZ-RECORD-PTR
               SET ADDRESS OF AZ-WK-RECORD-COUNT TO AZ-RECORD-PTR
               MOVE AZ-RC-WORK TO RETURN-CODE
               ADD 1 TO AZ-WK-RECORD-COUNT
               MOVE AZ-WK-RECORD-COUNT TO AZ-RECORD-COUNT-IN(1)
               EVALUATE AZ-TEST(1:AZ-TEST-LEN)
                 WHEN SPACE
                   CONTINUE
                 WHEN OTHER
                   CONTINUE
                 END-EVALUATE
             END-IF
           END-IF.
           PERFORM TEARDOWN.
       GETLINENUM.
           MOVE 1 TO AZ-LINE-J
           PERFORM VARYING AZ-LINE-I FROM AZ-LINE-BYTE BY 1
             UNTIL AZ-LINE-I > AZ-LINE-BYTE + 4
             MOVE ARG0-3(AZ-LINE-I) TO AZ-LINE-NUM-RD(AZ-LINE-J)
             ADD 1 TO AZ-LINE-J
           END-PERFORM
           EXIT.
       TEARDOWN.
           DISPLAY 'AZU0000I CICS_0E02_EPSCMORT END.'
           GOBACK.
       END PROGRAM 'CICS_0E02_EPSCMORT'.
